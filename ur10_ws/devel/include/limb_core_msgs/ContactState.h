// Generated by gencpp from file limb_core_msgs/ContactState.msg
// DO NOT EDIT!


#ifndef LIMB_CORE_MSGS_MESSAGE_CONTACTSTATE_H
#define LIMB_CORE_MSGS_MESSAGE_CONTACTSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <limb_core_msgs/Float64MultiArray.h>
#include <limb_core_msgs/Float64MultiArray.h>

namespace limb_core_msgs
{
template <class ContainerAllocator>
struct ContactState_
{
  typedef ContactState_<ContainerAllocator> Type;

  ContactState_()
    : header()
    , contact_num(0)
    , contact_geom_id_1()
    , contact_geom_id_2()
    , contact_geom_name_1()
    , contact_geom_name_2()
    , contact_dist()
    , contact_pose()
    , contact_force()  {
    }
  ContactState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , contact_num(0)
    , contact_geom_id_1(_alloc)
    , contact_geom_id_2(_alloc)
    , contact_geom_name_1(_alloc)
    , contact_geom_name_2(_alloc)
    , contact_dist(_alloc)
    , contact_pose(_alloc)
    , contact_force(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _contact_num_type;
  _contact_num_type contact_num;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _contact_geom_id_1_type;
  _contact_geom_id_1_type contact_geom_id_1;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _contact_geom_id_2_type;
  _contact_geom_id_2_type contact_geom_id_2;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _contact_geom_name_1_type;
  _contact_geom_name_1_type contact_geom_name_1;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _contact_geom_name_2_type;
  _contact_geom_name_2_type contact_geom_name_2;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _contact_dist_type;
  _contact_dist_type contact_dist;

   typedef std::vector< ::limb_core_msgs::Float64MultiArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::limb_core_msgs::Float64MultiArray_<ContainerAllocator> >::other >  _contact_pose_type;
  _contact_pose_type contact_pose;

   typedef std::vector< ::limb_core_msgs::Float64MultiArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::limb_core_msgs::Float64MultiArray_<ContainerAllocator> >::other >  _contact_force_type;
  _contact_force_type contact_force;





  typedef boost::shared_ptr< ::limb_core_msgs::ContactState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::limb_core_msgs::ContactState_<ContainerAllocator> const> ConstPtr;

}; // struct ContactState_

typedef ::limb_core_msgs::ContactState_<std::allocator<void> > ContactState;

typedef boost::shared_ptr< ::limb_core_msgs::ContactState > ContactStatePtr;
typedef boost::shared_ptr< ::limb_core_msgs::ContactState const> ContactStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::limb_core_msgs::ContactState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::limb_core_msgs::ContactState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::limb_core_msgs::ContactState_<ContainerAllocator1> & lhs, const ::limb_core_msgs::ContactState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.contact_num == rhs.contact_num &&
    lhs.contact_geom_id_1 == rhs.contact_geom_id_1 &&
    lhs.contact_geom_id_2 == rhs.contact_geom_id_2 &&
    lhs.contact_geom_name_1 == rhs.contact_geom_name_1 &&
    lhs.contact_geom_name_2 == rhs.contact_geom_name_2 &&
    lhs.contact_dist == rhs.contact_dist &&
    lhs.contact_pose == rhs.contact_pose &&
    lhs.contact_force == rhs.contact_force;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::limb_core_msgs::ContactState_<ContainerAllocator1> & lhs, const ::limb_core_msgs::ContactState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace limb_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::limb_core_msgs::ContactState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::limb_core_msgs::ContactState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::limb_core_msgs::ContactState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::limb_core_msgs::ContactState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::limb_core_msgs::ContactState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::limb_core_msgs::ContactState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::limb_core_msgs::ContactState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c359b5fe416632eb0ad0a1cb3285b15";
  }

  static const char* value(const ::limb_core_msgs::ContactState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c359b5fe416632eULL;
  static const uint64_t static_value2 = 0xb0ad0a1cb3285b15ULL;
};

template<class ContainerAllocator>
struct DataType< ::limb_core_msgs::ContactState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "limb_core_msgs/ContactState";
  }

  static const char* value(const ::limb_core_msgs::ContactState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::limb_core_msgs::ContactState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint16 contact_num\n"
"float64[] contact_geom_id_1\n"
"float64[] contact_geom_id_2\n"
"string[] contact_geom_name_1\n"
"string[] contact_geom_name_2\n"
"float64[] contact_dist\n"
"limb_core_msgs/Float64MultiArray[] contact_pose\n"
"limb_core_msgs/Float64MultiArray[] contact_force\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: limb_core_msgs/Float64MultiArray\n"
"Header header\n"
"float64[] data\n"
;
  }

  static const char* value(const ::limb_core_msgs::ContactState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::limb_core_msgs::ContactState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.contact_num);
      stream.next(m.contact_geom_id_1);
      stream.next(m.contact_geom_id_2);
      stream.next(m.contact_geom_name_1);
      stream.next(m.contact_geom_name_2);
      stream.next(m.contact_dist);
      stream.next(m.contact_pose);
      stream.next(m.contact_force);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ContactState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::limb_core_msgs::ContactState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::limb_core_msgs::ContactState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "contact_num: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.contact_num);
    s << indent << "contact_geom_id_1[]" << std::endl;
    for (size_t i = 0; i < v.contact_geom_id_1.size(); ++i)
    {
      s << indent << "  contact_geom_id_1[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.contact_geom_id_1[i]);
    }
    s << indent << "contact_geom_id_2[]" << std::endl;
    for (size_t i = 0; i < v.contact_geom_id_2.size(); ++i)
    {
      s << indent << "  contact_geom_id_2[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.contact_geom_id_2[i]);
    }
    s << indent << "contact_geom_name_1[]" << std::endl;
    for (size_t i = 0; i < v.contact_geom_name_1.size(); ++i)
    {
      s << indent << "  contact_geom_name_1[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.contact_geom_name_1[i]);
    }
    s << indent << "contact_geom_name_2[]" << std::endl;
    for (size_t i = 0; i < v.contact_geom_name_2.size(); ++i)
    {
      s << indent << "  contact_geom_name_2[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.contact_geom_name_2[i]);
    }
    s << indent << "contact_dist[]" << std::endl;
    for (size_t i = 0; i < v.contact_dist.size(); ++i)
    {
      s << indent << "  contact_dist[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.contact_dist[i]);
    }
    s << indent << "contact_pose[]" << std::endl;
    for (size_t i = 0; i < v.contact_pose.size(); ++i)
    {
      s << indent << "  contact_pose[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::limb_core_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "    ", v.contact_pose[i]);
    }
    s << indent << "contact_force[]" << std::endl;
    for (size_t i = 0; i < v.contact_force.size(); ++i)
    {
      s << indent << "  contact_force[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::limb_core_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "    ", v.contact_force[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIMB_CORE_MSGS_MESSAGE_CONTACTSTATE_H
