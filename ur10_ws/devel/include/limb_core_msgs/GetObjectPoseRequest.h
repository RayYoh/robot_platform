// Generated by gencpp from file limb_core_msgs/GetObjectPoseRequest.msg
// DO NOT EDIT!


#ifndef LIMB_CORE_MSGS_MESSAGE_GETOBJECTPOSEREQUEST_H
#define LIMB_CORE_MSGS_MESSAGE_GETOBJECTPOSEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace limb_core_msgs
{
template <class ContainerAllocator>
struct GetObjectPoseRequest_
{
  typedef GetObjectPoseRequest_<ContainerAllocator> Type;

  GetObjectPoseRequest_()
    : id()
    , in_hand()
    , pose()  {
    }
  GetObjectPoseRequest_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , in_hand(_alloc)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _id_type;
  _id_type id;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _in_hand_type;
  _in_hand_type in_hand;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;





  typedef boost::shared_ptr< ::limb_core_msgs::GetObjectPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::limb_core_msgs::GetObjectPoseRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetObjectPoseRequest_

typedef ::limb_core_msgs::GetObjectPoseRequest_<std::allocator<void> > GetObjectPoseRequest;

typedef boost::shared_ptr< ::limb_core_msgs::GetObjectPoseRequest > GetObjectPoseRequestPtr;
typedef boost::shared_ptr< ::limb_core_msgs::GetObjectPoseRequest const> GetObjectPoseRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::limb_core_msgs::GetObjectPoseRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::limb_core_msgs::GetObjectPoseRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::limb_core_msgs::GetObjectPoseRequest_<ContainerAllocator1> & lhs, const ::limb_core_msgs::GetObjectPoseRequest_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.in_hand == rhs.in_hand &&
    lhs.pose == rhs.pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::limb_core_msgs::GetObjectPoseRequest_<ContainerAllocator1> & lhs, const ::limb_core_msgs::GetObjectPoseRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace limb_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::limb_core_msgs::GetObjectPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::limb_core_msgs::GetObjectPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::limb_core_msgs::GetObjectPoseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::limb_core_msgs::GetObjectPoseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::limb_core_msgs::GetObjectPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::limb_core_msgs::GetObjectPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::limb_core_msgs::GetObjectPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e87f506f9643dbd43579ce3697beb4a9";
  }

  static const char* value(const ::limb_core_msgs::GetObjectPoseRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe87f506f9643dbd4ULL;
  static const uint64_t static_value2 = 0x3579ce3697beb4a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::limb_core_msgs::GetObjectPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "limb_core_msgs/GetObjectPoseRequest";
  }

  static const char* value(const ::limb_core_msgs::GetObjectPoseRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::limb_core_msgs::GetObjectPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] id\n"
"bool[] in_hand\n"
"geometry_msgs/Pose pose # torso->tool\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::limb_core_msgs::GetObjectPoseRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::limb_core_msgs::GetObjectPoseRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.in_hand);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetObjectPoseRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::limb_core_msgs::GetObjectPoseRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::limb_core_msgs::GetObjectPoseRequest_<ContainerAllocator>& v)
  {
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id[i]);
    }
    s << indent << "in_hand[]" << std::endl;
    for (size_t i = 0; i < v.in_hand.size(); ++i)
    {
      s << indent << "  in_hand[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.in_hand[i]);
    }
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIMB_CORE_MSGS_MESSAGE_GETOBJECTPOSEREQUEST_H
