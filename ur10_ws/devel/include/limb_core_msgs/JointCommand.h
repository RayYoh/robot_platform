// Generated by gencpp from file limb_core_msgs/JointCommand.msg
// DO NOT EDIT!


#ifndef LIMB_CORE_MSGS_MESSAGE_JOINTCOMMAND_H
#define LIMB_CORE_MSGS_MESSAGE_JOINTCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace limb_core_msgs
{
template <class ContainerAllocator>
struct JointCommand_
{
  typedef JointCommand_<ContainerAllocator> Type;

  JointCommand_()
    : header()
    , mode(0)
    , name()
    , command()  {
    }
  JointCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mode(0)
    , name(_alloc)
    , command(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _mode_type;
  _mode_type mode;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  _name_type name;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _command_type;
  _command_type command;





  typedef boost::shared_ptr< ::limb_core_msgs::JointCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::limb_core_msgs::JointCommand_<ContainerAllocator> const> ConstPtr;

}; // struct JointCommand_

typedef ::limb_core_msgs::JointCommand_<std::allocator<void> > JointCommand;

typedef boost::shared_ptr< ::limb_core_msgs::JointCommand > JointCommandPtr;
typedef boost::shared_ptr< ::limb_core_msgs::JointCommand const> JointCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::limb_core_msgs::JointCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::limb_core_msgs::JointCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::limb_core_msgs::JointCommand_<ContainerAllocator1> & lhs, const ::limb_core_msgs::JointCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.mode == rhs.mode &&
    lhs.name == rhs.name &&
    lhs.command == rhs.command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::limb_core_msgs::JointCommand_<ContainerAllocator1> & lhs, const ::limb_core_msgs::JointCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace limb_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::limb_core_msgs::JointCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::limb_core_msgs::JointCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::limb_core_msgs::JointCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::limb_core_msgs::JointCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::limb_core_msgs::JointCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::limb_core_msgs::JointCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::limb_core_msgs::JointCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94e37e6b9eb645a6cbc62a54515f279c";
  }

  static const char* value(const ::limb_core_msgs::JointCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94e37e6b9eb645a6ULL;
  static const uint64_t static_value2 = 0xcbc62a54515f279cULL;
};

template<class ContainerAllocator>
struct DataType< ::limb_core_msgs::JointCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "limb_core_msgs/JointCommand";
  }

  static const char* value(const ::limb_core_msgs::JointCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::limb_core_msgs::JointCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"#// for arm/effector\n"
"#  POSITION = 1,\n"
"#  VELOCITY,\n"
"#  TORQUE,\n"
"#  CURRENTTORQUE,\n"
"#  TRAJECTORY,\n"
"\n"
"#// for effector\n"
"#  LIMIT_SET_POSITION_MODE = 11,\n"
"#  LIMIT_SET_VELOCITY_MODE,\n"
"#  LIMIT_SET_FORCE_MODE,\n"
"\n"
"#// for effector\n"
"#  RESET_MODE = 20,\n"
"#  BASIC_MODE,\n"
"#  PINCH_MODE,\n"
"#  WIDE_MODE,\n"
"#  SCISSOR_MODE,\n"
"\n"
"#// for effector\n"
"#  OPEN_MODE = 30,\n"
"#  CLOSE_MODE\n"
"\n"
"\n"
"int32 mode\n"
"\n"
"string[]  name\n"
"\n"
"# for arm: position/velocity/torque/current_torque\n"
"# for effector: position/velocity/force  open/close(0~1, )\n"
"float64[] command\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::limb_core_msgs::JointCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::limb_core_msgs::JointCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mode);
      stream.next(m.name);
      stream.next(m.command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::limb_core_msgs::JointCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::limb_core_msgs::JointCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "command[]" << std::endl;
    for (size_t i = 0; i < v.command.size(); ++i)
    {
      s << indent << "  command[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.command[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIMB_CORE_MSGS_MESSAGE_JOINTCOMMAND_H
