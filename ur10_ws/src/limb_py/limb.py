# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_limb_py')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_limb_py')
    _limb_py = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_limb_py', [dirname(__file__)])
        except ImportError:
            import _limb_py
            return _limb_py
        try:
            _mod = imp.load_module('_limb_py', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _limb_py = swig_import_helper()
    del swig_import_helper
else:
    import _limb_py
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _limb_py.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _limb_py.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _limb_py.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _limb_py.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _limb_py.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _limb_py.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _limb_py.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _limb_py.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _limb_py.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _limb_py.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _limb_py.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _limb_py.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _limb_py.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _limb_py.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _limb_py.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _limb_py.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _limb_py.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _limb_py.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _limb_py.SHARED_PTR_DISOWN
class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _limb_py.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _limb_py.IntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _limb_py.IntVector___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _limb_py.IntVector___len__(self)

    def __getslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "std::vector< int,std::allocator< int > > *":
        return _limb_py.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _limb_py.IntVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "void":
        return _limb_py.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _limb_py.IntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _limb_py.IntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _limb_py.IntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _limb_py.IntVector_pop(self)

    def append(self, x: 'std::vector< int >::value_type const &') -> "void":
        return _limb_py.IntVector_append(self, x)

    def empty(self) -> "bool":
        return _limb_py.IntVector_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _limb_py.IntVector_size(self)

    def swap(self, v: 'IntVector') -> "void":
        return _limb_py.IntVector_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _limb_py.IntVector_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _limb_py.IntVector_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _limb_py.IntVector_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _limb_py.IntVector_rend(self)

    def clear(self) -> "void":
        return _limb_py.IntVector_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _limb_py.IntVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _limb_py.IntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _limb_py.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _limb_py.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< int >::value_type const &') -> "void":
        return _limb_py.IntVector_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _limb_py.IntVector_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _limb_py.IntVector_back(self)

    def assign(self, n: 'std::vector< int >::size_type', x: 'std::vector< int >::value_type const &') -> "void":
        return _limb_py.IntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _limb_py.IntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _limb_py.IntVector_insert(self, *args)

    def reserve(self, n: 'std::vector< int >::size_type') -> "void":
        return _limb_py.IntVector_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _limb_py.IntVector_capacity(self)
    __swig_destroy__ = _limb_py.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _limb_py.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _limb_py.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _limb_py.DoubleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _limb_py.DoubleVector___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _limb_py.DoubleVector___len__(self)

    def __getslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "std::vector< double,std::allocator< double > > *":
        return _limb_py.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _limb_py.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "void":
        return _limb_py.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _limb_py.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _limb_py.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _limb_py.DoubleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _limb_py.DoubleVector_pop(self)

    def append(self, x: 'std::vector< double >::value_type const &') -> "void":
        return _limb_py.DoubleVector_append(self, x)

    def empty(self) -> "bool":
        return _limb_py.DoubleVector_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _limb_py.DoubleVector_size(self)

    def swap(self, v: 'DoubleVector') -> "void":
        return _limb_py.DoubleVector_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _limb_py.DoubleVector_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _limb_py.DoubleVector_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _limb_py.DoubleVector_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _limb_py.DoubleVector_rend(self)

    def clear(self) -> "void":
        return _limb_py.DoubleVector_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _limb_py.DoubleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _limb_py.DoubleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _limb_py.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _limb_py.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< double >::value_type const &') -> "void":
        return _limb_py.DoubleVector_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _limb_py.DoubleVector_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _limb_py.DoubleVector_back(self)

    def assign(self, n: 'std::vector< double >::size_type', x: 'std::vector< double >::value_type const &') -> "void":
        return _limb_py.DoubleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _limb_py.DoubleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _limb_py.DoubleVector_insert(self, *args)

    def reserve(self, n: 'std::vector< double >::size_type') -> "void":
        return _limb_py.DoubleVector_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _limb_py.DoubleVector_capacity(self)
    __swig_destroy__ = _limb_py.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _limb_py.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class stringvector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stringvector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stringvector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _limb_py.stringvector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _limb_py.stringvector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _limb_py.stringvector___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _limb_py.stringvector___len__(self)

    def __getslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "std::vector< std::string,std::allocator< std::string > > *":
        return _limb_py.stringvector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _limb_py.stringvector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "void":
        return _limb_py.stringvector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _limb_py.stringvector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _limb_py.stringvector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _limb_py.stringvector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _limb_py.stringvector_pop(self)

    def append(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        return _limb_py.stringvector_append(self, x)

    def empty(self) -> "bool":
        return _limb_py.stringvector_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _limb_py.stringvector_size(self)

    def swap(self, v: 'stringvector') -> "void":
        return _limb_py.stringvector_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _limb_py.stringvector_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _limb_py.stringvector_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _limb_py.stringvector_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _limb_py.stringvector_rend(self)

    def clear(self) -> "void":
        return _limb_py.stringvector_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _limb_py.stringvector_get_allocator(self)

    def pop_back(self) -> "void":
        return _limb_py.stringvector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _limb_py.stringvector_erase(self, *args)

    def __init__(self, *args):
        this = _limb_py.new_stringvector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        return _limb_py.stringvector_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _limb_py.stringvector_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _limb_py.stringvector_back(self)

    def assign(self, n: 'std::vector< std::string >::size_type', x: 'std::vector< std::string >::value_type const &') -> "void":
        return _limb_py.stringvector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _limb_py.stringvector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _limb_py.stringvector_insert(self, *args)

    def reserve(self, n: 'std::vector< std::string >::size_type') -> "void":
        return _limb_py.stringvector_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _limb_py.stringvector_capacity(self)
    __swig_destroy__ = _limb_py.delete_stringvector
    __del__ = lambda self: None
stringvector_swigregister = _limb_py.stringvector_swigregister
stringvector_swigregister(stringvector)

class vector_vector_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_vector_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_vector_double, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _limb_py.vector_vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _limb_py.vector_vector_double___nonzero__(self)

    def __bool__(self) -> "bool":
        return _limb_py.vector_vector_double___bool__(self)

    def __len__(self) -> "std::vector< std::vector< double > >::size_type":
        return _limb_py.vector_vector_double___len__(self)

    def __getslice__(self, i: 'std::vector< std::vector< double > >::difference_type', j: 'std::vector< std::vector< double > >::difference_type') -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *":
        return _limb_py.vector_vector_double___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _limb_py.vector_vector_double___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::vector< double > >::difference_type', j: 'std::vector< std::vector< double > >::difference_type') -> "void":
        return _limb_py.vector_vector_double___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _limb_py.vector_vector_double___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< double > >::value_type const &":
        return _limb_py.vector_vector_double___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _limb_py.vector_vector_double___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< double > >::value_type":
        return _limb_py.vector_vector_double_pop(self)

    def append(self, x: 'DoubleVector') -> "void":
        return _limb_py.vector_vector_double_append(self, x)

    def empty(self) -> "bool":
        return _limb_py.vector_vector_double_empty(self)

    def size(self) -> "std::vector< std::vector< double > >::size_type":
        return _limb_py.vector_vector_double_size(self)

    def swap(self, v: 'vector_vector_double') -> "void":
        return _limb_py.vector_vector_double_swap(self, v)

    def begin(self) -> "std::vector< std::vector< double > >::iterator":
        return _limb_py.vector_vector_double_begin(self)

    def end(self) -> "std::vector< std::vector< double > >::iterator":
        return _limb_py.vector_vector_double_end(self)

    def rbegin(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        return _limb_py.vector_vector_double_rbegin(self)

    def rend(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        return _limb_py.vector_vector_double_rend(self)

    def clear(self) -> "void":
        return _limb_py.vector_vector_double_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< double > >::allocator_type":
        return _limb_py.vector_vector_double_get_allocator(self)

    def pop_back(self) -> "void":
        return _limb_py.vector_vector_double_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< double > >::iterator":
        return _limb_py.vector_vector_double_erase(self, *args)

    def __init__(self, *args):
        this = _limb_py.new_vector_vector_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'DoubleVector') -> "void":
        return _limb_py.vector_vector_double_push_back(self, x)

    def front(self) -> "std::vector< std::vector< double > >::value_type const &":
        return _limb_py.vector_vector_double_front(self)

    def back(self) -> "std::vector< std::vector< double > >::value_type const &":
        return _limb_py.vector_vector_double_back(self)

    def assign(self, n: 'std::vector< std::vector< double > >::size_type', x: 'DoubleVector') -> "void":
        return _limb_py.vector_vector_double_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _limb_py.vector_vector_double_resize(self, *args)

    def insert(self, *args) -> "void":
        return _limb_py.vector_vector_double_insert(self, *args)

    def reserve(self, n: 'std::vector< std::vector< double > >::size_type') -> "void":
        return _limb_py.vector_vector_double_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< double > >::size_type":
        return _limb_py.vector_vector_double_capacity(self)
    __swig_destroy__ = _limb_py.delete_vector_vector_double
    __del__ = lambda self: None
vector_vector_double_swigregister = _limb_py.vector_vector_double_swigregister
vector_vector_double_swigregister(vector_vector_double)

class vector_vectorxd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_vectorxd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_vectorxd, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _limb_py.vector_vectorxd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _limb_py.vector_vectorxd___nonzero__(self)

    def __bool__(self) -> "bool":
        return _limb_py.vector_vectorxd___bool__(self)

    def __len__(self) -> "std::vector< Eigen::VectorXd >::size_type":
        return _limb_py.vector_vectorxd___len__(self)

    def __getslice__(self, i: 'std::vector< Eigen::VectorXd >::difference_type', j: 'std::vector< Eigen::VectorXd >::difference_type') -> "std::vector< Eigen::VectorXd,std::allocator< Eigen::VectorXd > > *":
        return _limb_py.vector_vectorxd___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _limb_py.vector_vectorxd___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< Eigen::VectorXd >::difference_type', j: 'std::vector< Eigen::VectorXd >::difference_type') -> "void":
        return _limb_py.vector_vectorxd___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _limb_py.vector_vectorxd___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Eigen::VectorXd >::value_type const &":
        return _limb_py.vector_vectorxd___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _limb_py.vector_vectorxd___setitem__(self, *args)

    def pop(self) -> "std::vector< Eigen::VectorXd >::value_type":
        return _limb_py.vector_vectorxd_pop(self)

    def append(self, x: 'std::vector< Eigen::VectorXd >::value_type const &') -> "void":
        return _limb_py.vector_vectorxd_append(self, x)

    def empty(self) -> "bool":
        return _limb_py.vector_vectorxd_empty(self)

    def size(self) -> "std::vector< Eigen::VectorXd >::size_type":
        return _limb_py.vector_vectorxd_size(self)

    def swap(self, v: 'vector_vectorxd') -> "void":
        return _limb_py.vector_vectorxd_swap(self, v)

    def begin(self) -> "std::vector< Eigen::VectorXd >::iterator":
        return _limb_py.vector_vectorxd_begin(self)

    def end(self) -> "std::vector< Eigen::VectorXd >::iterator":
        return _limb_py.vector_vectorxd_end(self)

    def rbegin(self) -> "std::vector< Eigen::VectorXd >::reverse_iterator":
        return _limb_py.vector_vectorxd_rbegin(self)

    def rend(self) -> "std::vector< Eigen::VectorXd >::reverse_iterator":
        return _limb_py.vector_vectorxd_rend(self)

    def clear(self) -> "void":
        return _limb_py.vector_vectorxd_clear(self)

    def get_allocator(self) -> "std::vector< Eigen::VectorXd >::allocator_type":
        return _limb_py.vector_vectorxd_get_allocator(self)

    def pop_back(self) -> "void":
        return _limb_py.vector_vectorxd_pop_back(self)

    def erase(self, *args) -> "std::vector< Eigen::VectorXd >::iterator":
        return _limb_py.vector_vectorxd_erase(self, *args)

    def __init__(self, *args):
        this = _limb_py.new_vector_vectorxd(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< Eigen::VectorXd >::value_type const &') -> "void":
        return _limb_py.vector_vectorxd_push_back(self, x)

    def front(self) -> "std::vector< Eigen::VectorXd >::value_type const &":
        return _limb_py.vector_vectorxd_front(self)

    def back(self) -> "std::vector< Eigen::VectorXd >::value_type const &":
        return _limb_py.vector_vectorxd_back(self)

    def assign(self, n: 'std::vector< Eigen::VectorXd >::size_type', x: 'std::vector< Eigen::VectorXd >::value_type const &') -> "void":
        return _limb_py.vector_vectorxd_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _limb_py.vector_vectorxd_resize(self, *args)

    def insert(self, *args) -> "void":
        return _limb_py.vector_vectorxd_insert(self, *args)

    def reserve(self, n: 'std::vector< Eigen::VectorXd >::size_type') -> "void":
        return _limb_py.vector_vectorxd_reserve(self, n)

    def capacity(self) -> "std::vector< Eigen::VectorXd >::size_type":
        return _limb_py.vector_vectorxd_capacity(self)
    __swig_destroy__ = _limb_py.delete_vector_vectorxd
    __del__ = lambda self: None
vector_vectorxd_swigregister = _limb_py.vector_vectorxd_swigregister
vector_vectorxd_swigregister(vector_vectorxd)

class vector_vector3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_vector3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_vector3d, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _limb_py.vector_vector3d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _limb_py.vector_vector3d___nonzero__(self)

    def __bool__(self) -> "bool":
        return _limb_py.vector_vector3d___bool__(self)

    def __len__(self) -> "std::vector< Eigen::Vector3d >::size_type":
        return _limb_py.vector_vector3d___len__(self)

    def __getslice__(self, i: 'std::vector< Eigen::Vector3d >::difference_type', j: 'std::vector< Eigen::Vector3d >::difference_type') -> "std::vector< Eigen::Vector3d,std::allocator< Eigen::Vector3d > > *":
        return _limb_py.vector_vector3d___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _limb_py.vector_vector3d___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< Eigen::Vector3d >::difference_type', j: 'std::vector< Eigen::Vector3d >::difference_type') -> "void":
        return _limb_py.vector_vector3d___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _limb_py.vector_vector3d___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Eigen::Vector3d >::value_type const &":
        return _limb_py.vector_vector3d___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _limb_py.vector_vector3d___setitem__(self, *args)

    def pop(self) -> "std::vector< Eigen::Vector3d >::value_type":
        return _limb_py.vector_vector3d_pop(self)

    def append(self, x: 'std::vector< Eigen::Vector3d >::value_type const &') -> "void":
        return _limb_py.vector_vector3d_append(self, x)

    def empty(self) -> "bool":
        return _limb_py.vector_vector3d_empty(self)

    def size(self) -> "std::vector< Eigen::Vector3d >::size_type":
        return _limb_py.vector_vector3d_size(self)

    def swap(self, v: 'vector_vector3d') -> "void":
        return _limb_py.vector_vector3d_swap(self, v)

    def begin(self) -> "std::vector< Eigen::Vector3d >::iterator":
        return _limb_py.vector_vector3d_begin(self)

    def end(self) -> "std::vector< Eigen::Vector3d >::iterator":
        return _limb_py.vector_vector3d_end(self)

    def rbegin(self) -> "std::vector< Eigen::Vector3d >::reverse_iterator":
        return _limb_py.vector_vector3d_rbegin(self)

    def rend(self) -> "std::vector< Eigen::Vector3d >::reverse_iterator":
        return _limb_py.vector_vector3d_rend(self)

    def clear(self) -> "void":
        return _limb_py.vector_vector3d_clear(self)

    def get_allocator(self) -> "std::vector< Eigen::Vector3d >::allocator_type":
        return _limb_py.vector_vector3d_get_allocator(self)

    def pop_back(self) -> "void":
        return _limb_py.vector_vector3d_pop_back(self)

    def erase(self, *args) -> "std::vector< Eigen::Vector3d >::iterator":
        return _limb_py.vector_vector3d_erase(self, *args)

    def __init__(self, *args):
        this = _limb_py.new_vector_vector3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< Eigen::Vector3d >::value_type const &') -> "void":
        return _limb_py.vector_vector3d_push_back(self, x)

    def front(self) -> "std::vector< Eigen::Vector3d >::value_type const &":
        return _limb_py.vector_vector3d_front(self)

    def back(self) -> "std::vector< Eigen::Vector3d >::value_type const &":
        return _limb_py.vector_vector3d_back(self)

    def assign(self, n: 'std::vector< Eigen::Vector3d >::size_type', x: 'std::vector< Eigen::Vector3d >::value_type const &') -> "void":
        return _limb_py.vector_vector3d_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _limb_py.vector_vector3d_resize(self, *args)

    def insert(self, *args) -> "void":
        return _limb_py.vector_vector3d_insert(self, *args)

    def reserve(self, n: 'std::vector< Eigen::Vector3d >::size_type') -> "void":
        return _limb_py.vector_vector3d_reserve(self, n)

    def capacity(self) -> "std::vector< Eigen::Vector3d >::size_type":
        return _limb_py.vector_vector3d_capacity(self)
    __swig_destroy__ = _limb_py.delete_vector_vector3d
    __del__ = lambda self: None
vector_vector3d_swigregister = _limb_py.vector_vector3d_swigregister
vector_vector3d_swigregister(vector_vector3d)

class Str2LimbMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Str2LimbMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Str2LimbMap, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _limb_py.Str2LimbMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _limb_py.Str2LimbMap___nonzero__(self)

    def __bool__(self) -> "bool":
        return _limb_py.Str2LimbMap___bool__(self)

    def __len__(self) -> "std::map< std::string,std::shared_ptr< Limb > >::size_type":
        return _limb_py.Str2LimbMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< std::string,std::shared_ptr< Limb > >::key_type const &') -> "std::map< std::string,std::shared_ptr< Limb > >::mapped_type const &":
        return _limb_py.Str2LimbMap___getitem__(self, key)

    def __delitem__(self, key: 'std::map< std::string,std::shared_ptr< Limb > >::key_type const &') -> "void":
        return _limb_py.Str2LimbMap___delitem__(self, key)

    def has_key(self, key: 'std::map< std::string,std::shared_ptr< Limb > >::key_type const &') -> "bool":
        return _limb_py.Str2LimbMap_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _limb_py.Str2LimbMap_keys(self)

    def values(self) -> "PyObject *":
        return _limb_py.Str2LimbMap_values(self)

    def items(self) -> "PyObject *":
        return _limb_py.Str2LimbMap_items(self)

    def __contains__(self, key: 'std::map< std::string,std::shared_ptr< Limb > >::key_type const &') -> "bool":
        return _limb_py.Str2LimbMap___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _limb_py.Str2LimbMap_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _limb_py.Str2LimbMap_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _limb_py.Str2LimbMap___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _limb_py.Str2LimbMap_asdict(self)

    def __init__(self, *args):
        this = _limb_py.new_Str2LimbMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _limb_py.Str2LimbMap_empty(self)

    def size(self) -> "std::map< std::string,std::shared_ptr< Limb > >::size_type":
        return _limb_py.Str2LimbMap_size(self)

    def swap(self, v: 'Str2LimbMap') -> "void":
        return _limb_py.Str2LimbMap_swap(self, v)

    def begin(self) -> "std::map< std::string,std::shared_ptr< Limb > >::iterator":
        return _limb_py.Str2LimbMap_begin(self)

    def end(self) -> "std::map< std::string,std::shared_ptr< Limb > >::iterator":
        return _limb_py.Str2LimbMap_end(self)

    def rbegin(self) -> "std::map< std::string,std::shared_ptr< Limb > >::reverse_iterator":
        return _limb_py.Str2LimbMap_rbegin(self)

    def rend(self) -> "std::map< std::string,std::shared_ptr< Limb > >::reverse_iterator":
        return _limb_py.Str2LimbMap_rend(self)

    def clear(self) -> "void":
        return _limb_py.Str2LimbMap_clear(self)

    def get_allocator(self) -> "std::map< std::string,std::shared_ptr< Limb > >::allocator_type":
        return _limb_py.Str2LimbMap_get_allocator(self)

    def count(self, x: 'std::map< std::string,std::shared_ptr< Limb > >::key_type const &') -> "std::map< std::string,std::shared_ptr< Limb > >::size_type":
        return _limb_py.Str2LimbMap_count(self, x)

    def erase(self, *args) -> "void":
        return _limb_py.Str2LimbMap_erase(self, *args)

    def find(self, x: 'std::map< std::string,std::shared_ptr< Limb > >::key_type const &') -> "std::map< std::string,std::shared_ptr< Limb > >::iterator":
        return _limb_py.Str2LimbMap_find(self, x)

    def lower_bound(self, x: 'std::map< std::string,std::shared_ptr< Limb > >::key_type const &') -> "std::map< std::string,std::shared_ptr< Limb > >::iterator":
        return _limb_py.Str2LimbMap_lower_bound(self, x)

    def upper_bound(self, x: 'std::map< std::string,std::shared_ptr< Limb > >::key_type const &') -> "std::map< std::string,std::shared_ptr< Limb > >::iterator":
        return _limb_py.Str2LimbMap_upper_bound(self, x)
    __swig_destroy__ = _limb_py.delete_Str2LimbMap
    __del__ = lambda self: None
Str2LimbMap_swigregister = _limb_py.Str2LimbMap_swigregister
Str2LimbMap_swigregister(Str2LimbMap)

class PolynomialSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolynomialSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolynomialSolver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _limb_py.new_PolynomialSolver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Run(self, times: 'DoubleVector', node_equality_bounds: 'std::vector< NodeEqualityBound,std::allocator< NodeEqualityBound > > const &', node_inequality_bounds: 'std::vector< NodeInequalityBound,std::allocator< NodeInequalityBound > > const &', segment_inequality_bounds: 'std::vector< SegmentInequalityBound,std::allocator< SegmentInequalityBound > > const &') -> "p4::PolynomialSolver::Solution":
        return _limb_py.PolynomialSolver_Run(self, times, node_equality_bounds, node_inequality_bounds, segment_inequality_bounds)
    __swig_destroy__ = _limb_py.delete_PolynomialSolver
    __del__ = lambda self: None
PolynomialSolver_swigregister = _limb_py.PolynomialSolver_swigregister
PolynomialSolver_swigregister(PolynomialSolver)

class PolynomialSampler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolynomialSampler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolynomialSampler, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _limb_py.new_PolynomialSampler(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Run(self, *args) -> "Eigen::VectorXd":
        return _limb_py.PolynomialSampler_Run(self, *args)
    __swig_destroy__ = _limb_py.delete_PolynomialSampler
    __del__ = lambda self: None
PolynomialSampler_swigregister = _limb_py.PolynomialSampler_swigregister
PolynomialSampler_swigregister(PolynomialSampler)

RADIAN2DEGREE = _limb_py.RADIAN2DEGREE
PIE = _limb_py.PIE
EPSILON = _limb_py.EPSILON
DEGREE2RADIAN = _limb_py.DEGREE2RADIAN
XYZSEQUENCE = _limb_py.XYZSEQUENCE
LIMB_ARM_TYPE_NONE = _limb_py.LIMB_ARM_TYPE_NONE
LIMB_ARM_TYPE_KUKA_IIWA14 = _limb_py.LIMB_ARM_TYPE_KUKA_IIWA14
LIMB_ARM_TYPE_KINOVA_GEN3 = _limb_py.LIMB_ARM_TYPE_KINOVA_GEN3
LIMB_ARM_TYPE_UR3 = _limb_py.LIMB_ARM_TYPE_UR3
LIMB_ARM_TYPE_UR5 = _limb_py.LIMB_ARM_TYPE_UR5
LIMB_ARM_TYPE_UR10 = _limb_py.LIMB_ARM_TYPE_UR10
LIMB_ARM_TYPE_UR16E = _limb_py.LIMB_ARM_TYPE_UR16E
LIMB_ARM_TYPE_IRB1100 = _limb_py.LIMB_ARM_TYPE_IRB1100
class BasicParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BasicParameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["limb_name"] = _limb_py.BasicParameter_limb_name_set
    __swig_getmethods__["limb_name"] = _limb_py.BasicParameter_limb_name_get
    if _newclass:
        limb_name = _swig_property(_limb_py.BasicParameter_limb_name_get, _limb_py.BasicParameter_limb_name_set)
    __swig_setmethods__["limb_arm_type"] = _limb_py.BasicParameter_limb_arm_type_set
    __swig_getmethods__["limb_arm_type"] = _limb_py.BasicParameter_limb_arm_type_get
    if _newclass:
        limb_arm_type = _swig_property(_limb_py.BasicParameter_limb_arm_type_get, _limb_py.BasicParameter_limb_arm_type_set)
    __swig_setmethods__["type"] = _limb_py.BasicParameter_type_set
    __swig_getmethods__["type"] = _limb_py.BasicParameter_type_get
    if _newclass:
        type = _swig_property(_limb_py.BasicParameter_type_get, _limb_py.BasicParameter_type_set)
    __swig_setmethods__["debug"] = _limb_py.BasicParameter_debug_set
    __swig_getmethods__["debug"] = _limb_py.BasicParameter_debug_get
    if _newclass:
        debug = _swig_property(_limb_py.BasicParameter_debug_get, _limb_py.BasicParameter_debug_set)
    __swig_setmethods__["dof"] = _limb_py.BasicParameter_dof_set
    __swig_getmethods__["dof"] = _limb_py.BasicParameter_dof_get
    if _newclass:
        dof = _swig_property(_limb_py.BasicParameter_dof_get, _limb_py.BasicParameter_dof_set)
    __swig_setmethods__["frequency"] = _limb_py.BasicParameter_frequency_set
    __swig_getmethods__["frequency"] = _limb_py.BasicParameter_frequency_get
    if _newclass:
        frequency = _swig_property(_limb_py.BasicParameter_frequency_get, _limb_py.BasicParameter_frequency_set)
    __swig_setmethods__["dt"] = _limb_py.BasicParameter_dt_set
    __swig_getmethods__["dt"] = _limb_py.BasicParameter_dt_get
    if _newclass:
        dt = _swig_property(_limb_py.BasicParameter_dt_get, _limb_py.BasicParameter_dt_set)
    __swig_setmethods__["limit_velocity_scale"] = _limb_py.BasicParameter_limit_velocity_scale_set
    __swig_getmethods__["limit_velocity_scale"] = _limb_py.BasicParameter_limit_velocity_scale_get
    if _newclass:
        limit_velocity_scale = _swig_property(_limb_py.BasicParameter_limit_velocity_scale_get, _limb_py.BasicParameter_limit_velocity_scale_set)
    __swig_setmethods__["limit_acceleration_scale"] = _limb_py.BasicParameter_limit_acceleration_scale_set
    __swig_getmethods__["limit_acceleration_scale"] = _limb_py.BasicParameter_limit_acceleration_scale_get
    if _newclass:
        limit_acceleration_scale = _swig_property(_limb_py.BasicParameter_limit_acceleration_scale_get, _limb_py.BasicParameter_limit_acceleration_scale_set)
    __swig_setmethods__["limit_torque_scale"] = _limb_py.BasicParameter_limit_torque_scale_set
    __swig_getmethods__["limit_torque_scale"] = _limb_py.BasicParameter_limit_torque_scale_get
    if _newclass:
        limit_torque_scale = _swig_property(_limb_py.BasicParameter_limit_torque_scale_get, _limb_py.BasicParameter_limit_torque_scale_set)

    def __init__(self):
        this = _limb_py.new_BasicParameter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_BasicParameter
    __del__ = lambda self: None
BasicParameter_swigregister = _limb_py.BasicParameter_swigregister
BasicParameter_swigregister(BasicParameter)

class JointParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JointParameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["joint_name"] = _limb_py.JointParameter_joint_name_set
    __swig_getmethods__["joint_name"] = _limb_py.JointParameter_joint_name_get
    if _newclass:
        joint_name = _swig_property(_limb_py.JointParameter_joint_name_get, _limb_py.JointParameter_joint_name_set)
    __swig_setmethods__["lower_position"] = _limb_py.JointParameter_lower_position_set
    __swig_getmethods__["lower_position"] = _limb_py.JointParameter_lower_position_get
    if _newclass:
        lower_position = _swig_property(_limb_py.JointParameter_lower_position_get, _limb_py.JointParameter_lower_position_set)
    __swig_setmethods__["upper_position"] = _limb_py.JointParameter_upper_position_set
    __swig_getmethods__["upper_position"] = _limb_py.JointParameter_upper_position_get
    if _newclass:
        upper_position = _swig_property(_limb_py.JointParameter_upper_position_get, _limb_py.JointParameter_upper_position_set)
    __swig_setmethods__["home_position"] = _limb_py.JointParameter_home_position_set
    __swig_getmethods__["home_position"] = _limb_py.JointParameter_home_position_get
    if _newclass:
        home_position = _swig_property(_limb_py.JointParameter_home_position_get, _limb_py.JointParameter_home_position_set)
    __swig_setmethods__["limit_velocity"] = _limb_py.JointParameter_limit_velocity_set
    __swig_getmethods__["limit_velocity"] = _limb_py.JointParameter_limit_velocity_get
    if _newclass:
        limit_velocity = _swig_property(_limb_py.JointParameter_limit_velocity_get, _limb_py.JointParameter_limit_velocity_set)
    __swig_setmethods__["limit_acceleration"] = _limb_py.JointParameter_limit_acceleration_set
    __swig_getmethods__["limit_acceleration"] = _limb_py.JointParameter_limit_acceleration_get
    if _newclass:
        limit_acceleration = _swig_property(_limb_py.JointParameter_limit_acceleration_get, _limb_py.JointParameter_limit_acceleration_set)
    __swig_setmethods__["limit_torque"] = _limb_py.JointParameter_limit_torque_set
    __swig_getmethods__["limit_torque"] = _limb_py.JointParameter_limit_torque_get
    if _newclass:
        limit_torque = _swig_property(_limb_py.JointParameter_limit_torque_get, _limb_py.JointParameter_limit_torque_set)
    __swig_setmethods__["joint_direction"] = _limb_py.JointParameter_joint_direction_set
    __swig_getmethods__["joint_direction"] = _limb_py.JointParameter_joint_direction_get
    if _newclass:
        joint_direction = _swig_property(_limb_py.JointParameter_joint_direction_get, _limb_py.JointParameter_joint_direction_set)
    __swig_setmethods__["joint_offset"] = _limb_py.JointParameter_joint_offset_set
    __swig_getmethods__["joint_offset"] = _limb_py.JointParameter_joint_offset_get
    if _newclass:
        joint_offset = _swig_property(_limb_py.JointParameter_joint_offset_get, _limb_py.JointParameter_joint_offset_set)
    __swig_setmethods__["joint_mimic"] = _limb_py.JointParameter_joint_mimic_set
    __swig_getmethods__["joint_mimic"] = _limb_py.JointParameter_joint_mimic_get
    if _newclass:
        joint_mimic = _swig_property(_limb_py.JointParameter_joint_mimic_get, _limb_py.JointParameter_joint_mimic_set)

    def __init__(self):
        this = _limb_py.new_JointParameter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_JointParameter
    __del__ = lambda self: None
JointParameter_swigregister = _limb_py.JointParameter_swigregister
JointParameter_swigregister(JointParameter)

class JointState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JointState, name)
    __repr__ = _swig_repr
    __swig_setmethods__["joint_name"] = _limb_py.JointState_joint_name_set
    __swig_getmethods__["joint_name"] = _limb_py.JointState_joint_name_get
    if _newclass:
        joint_name = _swig_property(_limb_py.JointState_joint_name_get, _limb_py.JointState_joint_name_set)
    __swig_setmethods__["current_position"] = _limb_py.JointState_current_position_set
    __swig_getmethods__["current_position"] = _limb_py.JointState_current_position_get
    if _newclass:
        current_position = _swig_property(_limb_py.JointState_current_position_get, _limb_py.JointState_current_position_set)
    __swig_setmethods__["current_velocity"] = _limb_py.JointState_current_velocity_set
    __swig_getmethods__["current_velocity"] = _limb_py.JointState_current_velocity_get
    if _newclass:
        current_velocity = _swig_property(_limb_py.JointState_current_velocity_get, _limb_py.JointState_current_velocity_set)
    __swig_setmethods__["current_acceleration"] = _limb_py.JointState_current_acceleration_set
    __swig_getmethods__["current_acceleration"] = _limb_py.JointState_current_acceleration_get
    if _newclass:
        current_acceleration = _swig_property(_limb_py.JointState_current_acceleration_get, _limb_py.JointState_current_acceleration_set)
    __swig_setmethods__["current_torque"] = _limb_py.JointState_current_torque_set
    __swig_getmethods__["current_torque"] = _limb_py.JointState_current_torque_get
    if _newclass:
        current_torque = _swig_property(_limb_py.JointState_current_torque_get, _limb_py.JointState_current_torque_set)
    __swig_setmethods__["current_current_torque"] = _limb_py.JointState_current_current_torque_set
    __swig_getmethods__["current_current_torque"] = _limb_py.JointState_current_current_torque_get
    if _newclass:
        current_current_torque = _swig_property(_limb_py.JointState_current_current_torque_get, _limb_py.JointState_current_current_torque_set)
    __swig_setmethods__["current_filter_position"] = _limb_py.JointState_current_filter_position_set
    __swig_getmethods__["current_filter_position"] = _limb_py.JointState_current_filter_position_get
    if _newclass:
        current_filter_position = _swig_property(_limb_py.JointState_current_filter_position_get, _limb_py.JointState_current_filter_position_set)
    __swig_setmethods__["current_filter_velocity"] = _limb_py.JointState_current_filter_velocity_set
    __swig_getmethods__["current_filter_velocity"] = _limb_py.JointState_current_filter_velocity_get
    if _newclass:
        current_filter_velocity = _swig_property(_limb_py.JointState_current_filter_velocity_get, _limb_py.JointState_current_filter_velocity_set)
    __swig_setmethods__["current_filter_acceleration"] = _limb_py.JointState_current_filter_acceleration_set
    __swig_getmethods__["current_filter_acceleration"] = _limb_py.JointState_current_filter_acceleration_get
    if _newclass:
        current_filter_acceleration = _swig_property(_limb_py.JointState_current_filter_acceleration_get, _limb_py.JointState_current_filter_acceleration_set)
    __swig_setmethods__["command_position"] = _limb_py.JointState_command_position_set
    __swig_getmethods__["command_position"] = _limb_py.JointState_command_position_get
    if _newclass:
        command_position = _swig_property(_limb_py.JointState_command_position_get, _limb_py.JointState_command_position_set)
    __swig_setmethods__["command_velocity"] = _limb_py.JointState_command_velocity_set
    __swig_getmethods__["command_velocity"] = _limb_py.JointState_command_velocity_get
    if _newclass:
        command_velocity = _swig_property(_limb_py.JointState_command_velocity_get, _limb_py.JointState_command_velocity_set)
    __swig_setmethods__["command_acceleration"] = _limb_py.JointState_command_acceleration_set
    __swig_getmethods__["command_acceleration"] = _limb_py.JointState_command_acceleration_get
    if _newclass:
        command_acceleration = _swig_property(_limb_py.JointState_command_acceleration_get, _limb_py.JointState_command_acceleration_set)
    __swig_setmethods__["command_torque"] = _limb_py.JointState_command_torque_set
    __swig_getmethods__["command_torque"] = _limb_py.JointState_command_torque_get
    if _newclass:
        command_torque = _swig_property(_limb_py.JointState_command_torque_get, _limb_py.JointState_command_torque_set)
    __swig_setmethods__["command_current_torque"] = _limb_py.JointState_command_current_torque_set
    __swig_getmethods__["command_current_torque"] = _limb_py.JointState_command_current_torque_get
    if _newclass:
        command_current_torque = _swig_property(_limb_py.JointState_command_current_torque_get, _limb_py.JointState_command_current_torque_set)
    __swig_setmethods__["cal_dynamics_torque"] = _limb_py.JointState_cal_dynamics_torque_set
    __swig_getmethods__["cal_dynamics_torque"] = _limb_py.JointState_cal_dynamics_torque_get
    if _newclass:
        cal_dynamics_torque = _swig_property(_limb_py.JointState_cal_dynamics_torque_get, _limb_py.JointState_cal_dynamics_torque_set)
    __swig_setmethods__["cal_gravity_torque"] = _limb_py.JointState_cal_gravity_torque_set
    __swig_getmethods__["cal_gravity_torque"] = _limb_py.JointState_cal_gravity_torque_get
    if _newclass:
        cal_gravity_torque = _swig_property(_limb_py.JointState_cal_gravity_torque_get, _limb_py.JointState_cal_gravity_torque_set)
    __swig_setmethods__["smooth_torque_para"] = _limb_py.JointState_smooth_torque_para_set
    __swig_getmethods__["smooth_torque_para"] = _limb_py.JointState_smooth_torque_para_get
    if _newclass:
        smooth_torque_para = _swig_property(_limb_py.JointState_smooth_torque_para_get, _limb_py.JointState_smooth_torque_para_set)
    __swig_setmethods__["smooth_velocity_para"] = _limb_py.JointState_smooth_velocity_para_set
    __swig_getmethods__["smooth_velocity_para"] = _limb_py.JointState_smooth_velocity_para_get
    if _newclass:
        smooth_velocity_para = _swig_property(_limb_py.JointState_smooth_velocity_para_get, _limb_py.JointState_smooth_velocity_para_set)
    __swig_setmethods__["traj_control"] = _limb_py.JointState_traj_control_set
    __swig_getmethods__["traj_control"] = _limb_py.JointState_traj_control_get
    if _newclass:
        traj_control = _swig_property(_limb_py.JointState_traj_control_get, _limb_py.JointState_traj_control_set)

    def __init__(self):
        this = _limb_py.new_JointState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_JointState
    __del__ = lambda self: None
JointState_swigregister = _limb_py.JointState_swigregister
JointState_swigregister(JointState)

class EndpointState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EndpointState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EndpointState, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pose"] = _limb_py.EndpointState_pose_set
    __swig_getmethods__["pose"] = _limb_py.EndpointState_pose_get
    if _newclass:
        pose = _swig_property(_limb_py.EndpointState_pose_get, _limb_py.EndpointState_pose_set)
    __swig_setmethods__["twist"] = _limb_py.EndpointState_twist_set
    __swig_getmethods__["twist"] = _limb_py.EndpointState_twist_get
    if _newclass:
        twist = _swig_property(_limb_py.EndpointState_twist_get, _limb_py.EndpointState_twist_set)
    __swig_setmethods__["wrench"] = _limb_py.EndpointState_wrench_set
    __swig_getmethods__["wrench"] = _limb_py.EndpointState_wrench_get
    if _newclass:
        wrench = _swig_property(_limb_py.EndpointState_wrench_get, _limb_py.EndpointState_wrench_set)
    __swig_setmethods__["command_pose"] = _limb_py.EndpointState_command_pose_set
    __swig_getmethods__["command_pose"] = _limb_py.EndpointState_command_pose_get
    if _newclass:
        command_pose = _swig_property(_limb_py.EndpointState_command_pose_get, _limb_py.EndpointState_command_pose_set)
    __swig_setmethods__["command_twist"] = _limb_py.EndpointState_command_twist_set
    __swig_getmethods__["command_twist"] = _limb_py.EndpointState_command_twist_get
    if _newclass:
        command_twist = _swig_property(_limb_py.EndpointState_command_twist_get, _limb_py.EndpointState_command_twist_set)
    __swig_setmethods__["command_wrench"] = _limb_py.EndpointState_command_wrench_set
    __swig_getmethods__["command_wrench"] = _limb_py.EndpointState_command_wrench_get
    if _newclass:
        command_wrench = _swig_property(_limb_py.EndpointState_command_wrench_get, _limb_py.EndpointState_command_wrench_set)
    __swig_setmethods__["wrench_filter_parameter"] = _limb_py.EndpointState_wrench_filter_parameter_set
    __swig_getmethods__["wrench_filter_parameter"] = _limb_py.EndpointState_wrench_filter_parameter_get
    if _newclass:
        wrench_filter_parameter = _swig_property(_limb_py.EndpointState_wrench_filter_parameter_get, _limb_py.EndpointState_wrench_filter_parameter_set)
    __swig_setmethods__["endpoint_rpy_pose"] = _limb_py.EndpointState_endpoint_rpy_pose_set
    __swig_getmethods__["endpoint_rpy_pose"] = _limb_py.EndpointState_endpoint_rpy_pose_get
    if _newclass:
        endpoint_rpy_pose = _swig_property(_limb_py.EndpointState_endpoint_rpy_pose_get, _limb_py.EndpointState_endpoint_rpy_pose_set)
    __swig_setmethods__["endpoint_quaternion_pose"] = _limb_py.EndpointState_endpoint_quaternion_pose_set
    __swig_getmethods__["endpoint_quaternion_pose"] = _limb_py.EndpointState_endpoint_quaternion_pose_get
    if _newclass:
        endpoint_quaternion_pose = _swig_property(_limb_py.EndpointState_endpoint_quaternion_pose_get, _limb_py.EndpointState_endpoint_quaternion_pose_set)
    __swig_setmethods__["endpoint_twist"] = _limb_py.EndpointState_endpoint_twist_set
    __swig_getmethods__["endpoint_twist"] = _limb_py.EndpointState_endpoint_twist_get
    if _newclass:
        endpoint_twist = _swig_property(_limb_py.EndpointState_endpoint_twist_get, _limb_py.EndpointState_endpoint_twist_set)
    __swig_setmethods__["endpoint_wrench"] = _limb_py.EndpointState_endpoint_wrench_set
    __swig_getmethods__["endpoint_wrench"] = _limb_py.EndpointState_endpoint_wrench_get
    if _newclass:
        endpoint_wrench = _swig_property(_limb_py.EndpointState_endpoint_wrench_get, _limb_py.EndpointState_endpoint_wrench_set)
    __swig_setmethods__["endpoint_command_rpy_pose"] = _limb_py.EndpointState_endpoint_command_rpy_pose_set
    __swig_getmethods__["endpoint_command_rpy_pose"] = _limb_py.EndpointState_endpoint_command_rpy_pose_get
    if _newclass:
        endpoint_command_rpy_pose = _swig_property(_limb_py.EndpointState_endpoint_command_rpy_pose_get, _limb_py.EndpointState_endpoint_command_rpy_pose_set)
    __swig_setmethods__["endpoint_command_quaternion_pose"] = _limb_py.EndpointState_endpoint_command_quaternion_pose_set
    __swig_getmethods__["endpoint_command_quaternion_pose"] = _limb_py.EndpointState_endpoint_command_quaternion_pose_get
    if _newclass:
        endpoint_command_quaternion_pose = _swig_property(_limb_py.EndpointState_endpoint_command_quaternion_pose_get, _limb_py.EndpointState_endpoint_command_quaternion_pose_set)
    __swig_setmethods__["endpoint_command_twist"] = _limb_py.EndpointState_endpoint_command_twist_set
    __swig_getmethods__["endpoint_command_twist"] = _limb_py.EndpointState_endpoint_command_twist_get
    if _newclass:
        endpoint_command_twist = _swig_property(_limb_py.EndpointState_endpoint_command_twist_get, _limb_py.EndpointState_endpoint_command_twist_set)
    __swig_setmethods__["endpoint_command_wrench"] = _limb_py.EndpointState_endpoint_command_wrench_set
    __swig_getmethods__["endpoint_command_wrench"] = _limb_py.EndpointState_endpoint_command_wrench_get
    if _newclass:
        endpoint_command_wrench = _swig_property(_limb_py.EndpointState_endpoint_command_wrench_get, _limb_py.EndpointState_endpoint_command_wrench_set)
    __swig_setmethods__["ft_sensor"] = _limb_py.EndpointState_ft_sensor_set
    __swig_getmethods__["ft_sensor"] = _limb_py.EndpointState_ft_sensor_get
    if _newclass:
        ft_sensor = _swig_property(_limb_py.EndpointState_ft_sensor_get, _limb_py.EndpointState_ft_sensor_set)
    __swig_setmethods__["endpoint_ft_wrench_tool"] = _limb_py.EndpointState_endpoint_ft_wrench_tool_set
    __swig_getmethods__["endpoint_ft_wrench_tool"] = _limb_py.EndpointState_endpoint_ft_wrench_tool_get
    if _newclass:
        endpoint_ft_wrench_tool = _swig_property(_limb_py.EndpointState_endpoint_ft_wrench_tool_get, _limb_py.EndpointState_endpoint_ft_wrench_tool_set)
    __swig_setmethods__["endpoint_ft_wrench_world"] = _limb_py.EndpointState_endpoint_ft_wrench_world_set
    __swig_getmethods__["endpoint_ft_wrench_world"] = _limb_py.EndpointState_endpoint_ft_wrench_world_get
    if _newclass:
        endpoint_ft_wrench_world = _swig_property(_limb_py.EndpointState_endpoint_ft_wrench_world_get, _limb_py.EndpointState_endpoint_ft_wrench_world_set)
    __swig_setmethods__["frist_ft_sensor_msg_flag"] = _limb_py.EndpointState_frist_ft_sensor_msg_flag_set
    __swig_getmethods__["frist_ft_sensor_msg_flag"] = _limb_py.EndpointState_frist_ft_sensor_msg_flag_get
    if _newclass:
        frist_ft_sensor_msg_flag = _swig_property(_limb_py.EndpointState_frist_ft_sensor_msg_flag_get, _limb_py.EndpointState_frist_ft_sensor_msg_flag_set)
    __swig_setmethods__["ft_sensor_subscriber"] = _limb_py.EndpointState_ft_sensor_subscriber_set
    __swig_getmethods__["ft_sensor_subscriber"] = _limb_py.EndpointState_ft_sensor_subscriber_get
    if _newclass:
        ft_sensor_subscriber = _swig_property(_limb_py.EndpointState_ft_sensor_subscriber_get, _limb_py.EndpointState_ft_sensor_subscriber_set)
    __swig_setmethods__["tool_2_ft_sensor"] = _limb_py.EndpointState_tool_2_ft_sensor_set
    __swig_getmethods__["tool_2_ft_sensor"] = _limb_py.EndpointState_tool_2_ft_sensor_get
    if _newclass:
        tool_2_ft_sensor = _swig_property(_limb_py.EndpointState_tool_2_ft_sensor_get, _limb_py.EndpointState_tool_2_ft_sensor_set)
    __swig_setmethods__["gravity"] = _limb_py.EndpointState_gravity_set
    __swig_getmethods__["gravity"] = _limb_py.EndpointState_gravity_get
    if _newclass:
        gravity = _swig_property(_limb_py.EndpointState_gravity_get, _limb_py.EndpointState_gravity_set)
    __swig_setmethods__["mass_center"] = _limb_py.EndpointState_mass_center_set
    __swig_getmethods__["mass_center"] = _limb_py.EndpointState_mass_center_get
    if _newclass:
        mass_center = _swig_property(_limb_py.EndpointState_mass_center_get, _limb_py.EndpointState_mass_center_set)
    __swig_setmethods__["ft_bias"] = _limb_py.EndpointState_ft_bias_set
    __swig_getmethods__["ft_bias"] = _limb_py.EndpointState_ft_bias_get
    if _newclass:
        ft_bias = _swig_property(_limb_py.EndpointState_ft_bias_get, _limb_py.EndpointState_ft_bias_set)

    def __init__(self):
        this = _limb_py.new_EndpointState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_EndpointState
    __del__ = lambda self: None
EndpointState_swigregister = _limb_py.EndpointState_swigregister
EndpointState_swigregister(EndpointState)

class FTSensor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTSensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FTSensor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ft_sensor"] = _limb_py.FTSensor_ft_sensor_set
    __swig_getmethods__["ft_sensor"] = _limb_py.FTSensor_ft_sensor_get
    if _newclass:
        ft_sensor = _swig_property(_limb_py.FTSensor_ft_sensor_get, _limb_py.FTSensor_ft_sensor_set)
    __swig_setmethods__["endpoint_ft_wrench_tool"] = _limb_py.FTSensor_endpoint_ft_wrench_tool_set
    __swig_getmethods__["endpoint_ft_wrench_tool"] = _limb_py.FTSensor_endpoint_ft_wrench_tool_get
    if _newclass:
        endpoint_ft_wrench_tool = _swig_property(_limb_py.FTSensor_endpoint_ft_wrench_tool_get, _limb_py.FTSensor_endpoint_ft_wrench_tool_set)
    __swig_setmethods__["endpoint_ft_wrench_world"] = _limb_py.FTSensor_endpoint_ft_wrench_world_set
    __swig_getmethods__["endpoint_ft_wrench_world"] = _limb_py.FTSensor_endpoint_ft_wrench_world_get
    if _newclass:
        endpoint_ft_wrench_world = _swig_property(_limb_py.FTSensor_endpoint_ft_wrench_world_get, _limb_py.FTSensor_endpoint_ft_wrench_world_set)
    __swig_setmethods__["frist_ft_sensor_msg_flag"] = _limb_py.FTSensor_frist_ft_sensor_msg_flag_set
    __swig_getmethods__["frist_ft_sensor_msg_flag"] = _limb_py.FTSensor_frist_ft_sensor_msg_flag_get
    if _newclass:
        frist_ft_sensor_msg_flag = _swig_property(_limb_py.FTSensor_frist_ft_sensor_msg_flag_get, _limb_py.FTSensor_frist_ft_sensor_msg_flag_set)

    def __init__(self):
        this = _limb_py.new_FTSensor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_FTSensor
    __del__ = lambda self: None
FTSensor_swigregister = _limb_py.FTSensor_swigregister
FTSensor_swigregister(FTSensor)

class DHParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DHParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DHParameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["joint_name"] = _limb_py.DHParameter_joint_name_set
    __swig_getmethods__["joint_name"] = _limb_py.DHParameter_joint_name_get
    if _newclass:
        joint_name = _swig_property(_limb_py.DHParameter_joint_name_get, _limb_py.DHParameter_joint_name_set)
    __swig_setmethods__["dh_offset"] = _limb_py.DHParameter_dh_offset_set
    __swig_getmethods__["dh_offset"] = _limb_py.DHParameter_dh_offset_get
    if _newclass:
        dh_offset = _swig_property(_limb_py.DHParameter_dh_offset_get, _limb_py.DHParameter_dh_offset_set)
    __swig_setmethods__["dh_theta"] = _limb_py.DHParameter_dh_theta_set
    __swig_getmethods__["dh_theta"] = _limb_py.DHParameter_dh_theta_get
    if _newclass:
        dh_theta = _swig_property(_limb_py.DHParameter_dh_theta_get, _limb_py.DHParameter_dh_theta_set)
    __swig_setmethods__["dh_d"] = _limb_py.DHParameter_dh_d_set
    __swig_getmethods__["dh_d"] = _limb_py.DHParameter_dh_d_get
    if _newclass:
        dh_d = _swig_property(_limb_py.DHParameter_dh_d_get, _limb_py.DHParameter_dh_d_set)
    __swig_setmethods__["dh_a"] = _limb_py.DHParameter_dh_a_set
    __swig_getmethods__["dh_a"] = _limb_py.DHParameter_dh_a_get
    if _newclass:
        dh_a = _swig_property(_limb_py.DHParameter_dh_a_get, _limb_py.DHParameter_dh_a_set)
    __swig_setmethods__["dh_alpha"] = _limb_py.DHParameter_dh_alpha_set
    __swig_getmethods__["dh_alpha"] = _limb_py.DHParameter_dh_alpha_get
    if _newclass:
        dh_alpha = _swig_property(_limb_py.DHParameter_dh_alpha_get, _limb_py.DHParameter_dh_alpha_set)
    __swig_setmethods__["dh_l"] = _limb_py.DHParameter_dh_l_set
    __swig_getmethods__["dh_l"] = _limb_py.DHParameter_dh_l_get
    if _newclass:
        dh_l = _swig_property(_limb_py.DHParameter_dh_l_get, _limb_py.DHParameter_dh_l_set)

    def __init__(self):
        this = _limb_py.new_DHParameter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_DHParameter
    __del__ = lambda self: None
DHParameter_swigregister = _limb_py.DHParameter_swigregister
DHParameter_swigregister(DHParameter)

class KinematicsParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KinematicsParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KinematicsParameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_dh"] = _limb_py.KinematicsParameter__dh_set
    __swig_getmethods__["_dh"] = _limb_py.KinematicsParameter__dh_get
    if _newclass:
        _dh = _swig_property(_limb_py.KinematicsParameter__dh_get, _limb_py.KinematicsParameter__dh_set)
    __swig_setmethods__["urdf_path"] = _limb_py.KinematicsParameter_urdf_path_set
    __swig_getmethods__["urdf_path"] = _limb_py.KinematicsParameter_urdf_path_get
    if _newclass:
        urdf_path = _swig_property(_limb_py.KinematicsParameter_urdf_path_get, _limb_py.KinematicsParameter_urdf_path_set)
    __swig_setmethods__["kdl_tree"] = _limb_py.KinematicsParameter_kdl_tree_set
    __swig_getmethods__["kdl_tree"] = _limb_py.KinematicsParameter_kdl_tree_get
    if _newclass:
        kdl_tree = _swig_property(_limb_py.KinematicsParameter_kdl_tree_get, _limb_py.KinematicsParameter_kdl_tree_set)
    __swig_setmethods__["gravity_vec"] = _limb_py.KinematicsParameter_gravity_vec_set
    __swig_getmethods__["gravity_vec"] = _limb_py.KinematicsParameter_gravity_vec_get
    if _newclass:
        gravity_vec = _swig_property(_limb_py.KinematicsParameter_gravity_vec_get, _limb_py.KinematicsParameter_gravity_vec_set)
    __swig_setmethods__["m_tracik_solver"] = _limb_py.KinematicsParameter_m_tracik_solver_set
    __swig_getmethods__["m_tracik_solver"] = _limb_py.KinematicsParameter_m_tracik_solver_get
    if _newclass:
        m_tracik_solver = _swig_property(_limb_py.KinematicsParameter_m_tracik_solver_get, _limb_py.KinematicsParameter_m_tracik_solver_set)
    __swig_setmethods__["m_fk_solver"] = _limb_py.KinematicsParameter_m_fk_solver_set
    __swig_getmethods__["m_fk_solver"] = _limb_py.KinematicsParameter_m_fk_solver_get
    if _newclass:
        m_fk_solver = _swig_property(_limb_py.KinematicsParameter_m_fk_solver_get, _limb_py.KinematicsParameter_m_fk_solver_set)
    __swig_setmethods__["m_jnt_to_jac_solver"] = _limb_py.KinematicsParameter_m_jnt_to_jac_solver_set
    __swig_getmethods__["m_jnt_to_jac_solver"] = _limb_py.KinematicsParameter_m_jnt_to_jac_solver_get
    if _newclass:
        m_jnt_to_jac_solver = _swig_property(_limb_py.KinematicsParameter_m_jnt_to_jac_solver_get, _limb_py.KinematicsParameter_m_jnt_to_jac_solver_set)
    __swig_setmethods__["m_dyn_param"] = _limb_py.KinematicsParameter_m_dyn_param_set
    __swig_getmethods__["m_dyn_param"] = _limb_py.KinematicsParameter_m_dyn_param_get
    if _newclass:
        m_dyn_param = _swig_property(_limb_py.KinematicsParameter_m_dyn_param_get, _limb_py.KinematicsParameter_m_dyn_param_set)
    __swig_setmethods__["m_chain"] = _limb_py.KinematicsParameter_m_chain_set
    __swig_getmethods__["m_chain"] = _limb_py.KinematicsParameter_m_chain_get
    if _newclass:
        m_chain = _swig_property(_limb_py.KinematicsParameter_m_chain_get, _limb_py.KinematicsParameter_m_chain_set)
    __swig_setmethods__["m_gra_chain"] = _limb_py.KinematicsParameter_m_gra_chain_set
    __swig_getmethods__["m_gra_chain"] = _limb_py.KinematicsParameter_m_gra_chain_get
    if _newclass:
        m_gra_chain = _swig_property(_limb_py.KinematicsParameter_m_gra_chain_get, _limb_py.KinematicsParameter_m_gra_chain_set)
    __swig_setmethods__["m_chain_start"] = _limb_py.KinematicsParameter_m_chain_start_set
    __swig_getmethods__["m_chain_start"] = _limb_py.KinematicsParameter_m_chain_start_get
    if _newclass:
        m_chain_start = _swig_property(_limb_py.KinematicsParameter_m_chain_start_get, _limb_py.KinematicsParameter_m_chain_start_set)
    __swig_setmethods__["m_chain_end"] = _limb_py.KinematicsParameter_m_chain_end_set
    __swig_getmethods__["m_chain_end"] = _limb_py.KinematicsParameter_m_chain_end_get
    if _newclass:
        m_chain_end = _swig_property(_limb_py.KinematicsParameter_m_chain_end_get, _limb_py.KinematicsParameter_m_chain_end_set)
    __swig_setmethods__["m_gravity_chain_end"] = _limb_py.KinematicsParameter_m_gravity_chain_end_set
    __swig_getmethods__["m_gravity_chain_end"] = _limb_py.KinematicsParameter_m_gravity_chain_end_get
    if _newclass:
        m_gravity_chain_end = _swig_property(_limb_py.KinematicsParameter_m_gravity_chain_end_get, _limb_py.KinematicsParameter_m_gravity_chain_end_set)
    __swig_setmethods__["collision_detection_flag"] = _limb_py.KinematicsParameter_collision_detection_flag_set
    __swig_getmethods__["collision_detection_flag"] = _limb_py.KinematicsParameter_collision_detection_flag_get
    if _newclass:
        collision_detection_flag = _swig_property(_limb_py.KinematicsParameter_collision_detection_flag_get, _limb_py.KinematicsParameter_collision_detection_flag_set)
    __swig_setmethods__["min_collision_distance"] = _limb_py.KinematicsParameter_min_collision_distance_set
    __swig_getmethods__["min_collision_distance"] = _limb_py.KinematicsParameter_min_collision_distance_get
    if _newclass:
        min_collision_distance = _swig_property(_limb_py.KinematicsParameter_min_collision_distance_get, _limb_py.KinematicsParameter_min_collision_distance_set)
    __swig_setmethods__["nearest_points"] = _limb_py.KinematicsParameter_nearest_points_set
    __swig_getmethods__["nearest_points"] = _limb_py.KinematicsParameter_nearest_points_get
    if _newclass:
        nearest_points = _swig_property(_limb_py.KinematicsParameter_nearest_points_get, _limb_py.KinematicsParameter_nearest_points_set)
    __swig_setmethods__["torso2base"] = _limb_py.KinematicsParameter_torso2base_set
    __swig_getmethods__["torso2base"] = _limb_py.KinematicsParameter_torso2base_get
    if _newclass:
        torso2base = _swig_property(_limb_py.KinematicsParameter_torso2base_get, _limb_py.KinematicsParameter_torso2base_set)
    __swig_setmethods__["tool2effector"] = _limb_py.KinematicsParameter_tool2effector_set
    __swig_getmethods__["tool2effector"] = _limb_py.KinematicsParameter_tool2effector_get
    if _newclass:
        tool2effector = _swig_property(_limb_py.KinematicsParameter_tool2effector_get, _limb_py.KinematicsParameter_tool2effector_set)
    __swig_setmethods__["Ttorso2base"] = _limb_py.KinematicsParameter_Ttorso2base_set
    __swig_getmethods__["Ttorso2base"] = _limb_py.KinematicsParameter_Ttorso2base_get
    if _newclass:
        Ttorso2base = _swig_property(_limb_py.KinematicsParameter_Ttorso2base_get, _limb_py.KinematicsParameter_Ttorso2base_set)
    __swig_setmethods__["Ttool2effector"] = _limb_py.KinematicsParameter_Ttool2effector_set
    __swig_getmethods__["Ttool2effector"] = _limb_py.KinematicsParameter_Ttool2effector_get
    if _newclass:
        Ttool2effector = _swig_property(_limb_py.KinematicsParameter_Ttool2effector_get, _limb_py.KinematicsParameter_Ttool2effector_set)

    def __init__(self):
        this = _limb_py.new_KinematicsParameter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_KinematicsParameter
    __del__ = lambda self: None
KinematicsParameter_swigregister = _limb_py.KinematicsParameter_swigregister
KinematicsParameter_swigregister(KinematicsParameter)

class DynamicsParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicsParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicsParameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["max_load_scale"] = _limb_py.DynamicsParameter_max_load_scale_set
    __swig_getmethods__["max_load_scale"] = _limb_py.DynamicsParameter_max_load_scale_get
    if _newclass:
        max_load_scale = _swig_property(_limb_py.DynamicsParameter_max_load_scale_get, _limb_py.DynamicsParameter_max_load_scale_set)

    def __init__(self):
        this = _limb_py.new_DynamicsParameter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_DynamicsParameter
    __del__ = lambda self: None
DynamicsParameter_swigregister = _limb_py.DynamicsParameter_swigregister
DynamicsParameter_swigregister(DynamicsParameter)

class Hardware(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hardware, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hardware, name)
    __repr__ = _swig_repr
    __swig_setmethods__["interface_type"] = _limb_py.Hardware_interface_type_set
    __swig_getmethods__["interface_type"] = _limb_py.Hardware_interface_type_get
    if _newclass:
        interface_type = _swig_property(_limb_py.Hardware_interface_type_get, _limb_py.Hardware_interface_type_set)
    __swig_setmethods__["service_name"] = _limb_py.Hardware_service_name_set
    __swig_getmethods__["service_name"] = _limb_py.Hardware_service_name_get
    if _newclass:
        service_name = _swig_property(_limb_py.Hardware_service_name_get, _limb_py.Hardware_service_name_set)
    __swig_setmethods__["tactile_state_service_flag"] = _limb_py.Hardware_tactile_state_service_flag_set
    __swig_getmethods__["tactile_state_service_flag"] = _limb_py.Hardware_tactile_state_service_flag_get
    if _newclass:
        tactile_state_service_flag = _swig_property(_limb_py.Hardware_tactile_state_service_flag_get, _limb_py.Hardware_tactile_state_service_flag_set)
    __swig_setmethods__["tactile_state_client"] = _limb_py.Hardware_tactile_state_client_set
    __swig_getmethods__["tactile_state_client"] = _limb_py.Hardware_tactile_state_client_get
    if _newclass:
        tactile_state_client = _swig_property(_limb_py.Hardware_tactile_state_client_get, _limb_py.Hardware_tactile_state_client_set)

    def __init__(self):
        this = _limb_py.new_Hardware()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_Hardware
    __del__ = lambda self: None
Hardware_swigregister = _limb_py.Hardware_swigregister
Hardware_swigregister(Hardware)

class VisualObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisualObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisualObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["visual_object_flag"] = _limb_py.VisualObject_visual_object_flag_set
    __swig_getmethods__["visual_object_flag"] = _limb_py.VisualObject_visual_object_flag_get
    if _newclass:
        visual_object_flag = _swig_property(_limb_py.VisualObject_visual_object_flag_get, _limb_py.VisualObject_visual_object_flag_set)
    __swig_setmethods__["visual_object_service_flag"] = _limb_py.VisualObject_visual_object_service_flag_set
    __swig_getmethods__["visual_object_service_flag"] = _limb_py.VisualObject_visual_object_service_flag_get
    if _newclass:
        visual_object_service_flag = _swig_property(_limb_py.VisualObject_visual_object_service_flag_get, _limb_py.VisualObject_visual_object_service_flag_set)
    __swig_setmethods__["topic_name"] = _limb_py.VisualObject_topic_name_set
    __swig_getmethods__["topic_name"] = _limb_py.VisualObject_topic_name_get
    if _newclass:
        topic_name = _swig_property(_limb_py.VisualObject_topic_name_get, _limb_py.VisualObject_topic_name_set)
    __swig_setmethods__["service_name"] = _limb_py.VisualObject_service_name_set
    __swig_getmethods__["service_name"] = _limb_py.VisualObject_service_name_get
    if _newclass:
        service_name = _swig_property(_limb_py.VisualObject_service_name_get, _limb_py.VisualObject_service_name_set)
    __swig_setmethods__["torso2visual"] = _limb_py.VisualObject_torso2visual_set
    __swig_getmethods__["torso2visual"] = _limb_py.VisualObject_torso2visual_get
    if _newclass:
        torso2visual = _swig_property(_limb_py.VisualObject_torso2visual_get, _limb_py.VisualObject_torso2visual_set)
    __swig_setmethods__["frist_visual_object_msg_flag"] = _limb_py.VisualObject_frist_visual_object_msg_flag_set
    __swig_getmethods__["frist_visual_object_msg_flag"] = _limb_py.VisualObject_frist_visual_object_msg_flag_get
    if _newclass:
        frist_visual_object_msg_flag = _swig_property(_limb_py.VisualObject_frist_visual_object_msg_flag_get, _limb_py.VisualObject_frist_visual_object_msg_flag_set)
    __swig_setmethods__["object_pose"] = _limb_py.VisualObject_object_pose_set
    __swig_getmethods__["object_pose"] = _limb_py.VisualObject_object_pose_get
    if _newclass:
        object_pose = _swig_property(_limb_py.VisualObject_object_pose_get, _limb_py.VisualObject_object_pose_set)
    __swig_setmethods__["object_found"] = _limb_py.VisualObject_object_found_set
    __swig_getmethods__["object_found"] = _limb_py.VisualObject_object_found_get
    if _newclass:
        object_found = _swig_property(_limb_py.VisualObject_object_found_get, _limb_py.VisualObject_object_found_set)
    __swig_setmethods__["object_found_time"] = _limb_py.VisualObject_object_found_time_set
    __swig_getmethods__["object_found_time"] = _limb_py.VisualObject_object_found_time_get
    if _newclass:
        object_found_time = _swig_property(_limb_py.VisualObject_object_found_time_get, _limb_py.VisualObject_object_found_time_set)
    __swig_setmethods__["object_found_sys_time"] = _limb_py.VisualObject_object_found_sys_time_set
    __swig_getmethods__["object_found_sys_time"] = _limb_py.VisualObject_object_found_sys_time_get
    if _newclass:
        object_found_sys_time = _swig_property(_limb_py.VisualObject_object_found_sys_time_get, _limb_py.VisualObject_object_found_sys_time_set)
    __swig_setmethods__["object_pose_torso"] = _limb_py.VisualObject_object_pose_torso_set
    __swig_getmethods__["object_pose_torso"] = _limb_py.VisualObject_object_pose_torso_get
    if _newclass:
        object_pose_torso = _swig_property(_limb_py.VisualObject_object_pose_torso_get, _limb_py.VisualObject_object_pose_torso_set)
    __swig_setmethods__["object_pose_torso_time"] = _limb_py.VisualObject_object_pose_torso_time_set
    __swig_getmethods__["object_pose_torso_time"] = _limb_py.VisualObject_object_pose_torso_time_get
    if _newclass:
        object_pose_torso_time = _swig_property(_limb_py.VisualObject_object_pose_torso_time_get, _limb_py.VisualObject_object_pose_torso_time_set)
    __swig_setmethods__["visual_object_subscriber"] = _limb_py.VisualObject_visual_object_subscriber_set
    __swig_getmethods__["visual_object_subscriber"] = _limb_py.VisualObject_visual_object_subscriber_get
    if _newclass:
        visual_object_subscriber = _swig_property(_limb_py.VisualObject_visual_object_subscriber_get, _limb_py.VisualObject_visual_object_subscriber_set)
    __swig_setmethods__["visual_object_pose_torso_publisher"] = _limb_py.VisualObject_visual_object_pose_torso_publisher_set
    __swig_getmethods__["visual_object_pose_torso_publisher"] = _limb_py.VisualObject_visual_object_pose_torso_publisher_get
    if _newclass:
        visual_object_pose_torso_publisher = _swig_property(_limb_py.VisualObject_visual_object_pose_torso_publisher_get, _limb_py.VisualObject_visual_object_pose_torso_publisher_set)
    __swig_setmethods__["object_traj_collection"] = _limb_py.VisualObject_object_traj_collection_set
    __swig_getmethods__["object_traj_collection"] = _limb_py.VisualObject_object_traj_collection_get
    if _newclass:
        object_traj_collection = _swig_property(_limb_py.VisualObject_object_traj_collection_get, _limb_py.VisualObject_object_traj_collection_set)
    __swig_setmethods__["object_traj"] = _limb_py.VisualObject_object_traj_set
    __swig_getmethods__["object_traj"] = _limb_py.VisualObject_object_traj_get
    if _newclass:
        object_traj = _swig_property(_limb_py.VisualObject_object_traj_get, _limb_py.VisualObject_object_traj_set)
    __swig_setmethods__["timeout"] = _limb_py.VisualObject_timeout_set
    __swig_getmethods__["timeout"] = _limb_py.VisualObject_timeout_get
    if _newclass:
        timeout = _swig_property(_limb_py.VisualObject_timeout_get, _limb_py.VisualObject_timeout_set)
    __swig_setmethods__["visual_object_client"] = _limb_py.VisualObject_visual_object_client_set
    __swig_getmethods__["visual_object_client"] = _limb_py.VisualObject_visual_object_client_get
    if _newclass:
        visual_object_client = _swig_property(_limb_py.VisualObject_visual_object_client_get, _limb_py.VisualObject_visual_object_client_set)

    def __init__(self):
        this = _limb_py.new_VisualObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_VisualObject
    __del__ = lambda self: None
VisualObject_swigregister = _limb_py.VisualObject_swigregister
VisualObject_swigregister(VisualObject)

class EffectorParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EffectorParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EffectorParameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mode"] = _limb_py.EffectorParameter_mode_set
    __swig_getmethods__["mode"] = _limb_py.EffectorParameter_mode_get
    if _newclass:
        mode = _swig_property(_limb_py.EffectorParameter_mode_get, _limb_py.EffectorParameter_mode_set)
    __swig_setmethods__["scale"] = _limb_py.EffectorParameter_scale_set
    __swig_getmethods__["scale"] = _limb_py.EffectorParameter_scale_get
    if _newclass:
        scale = _swig_property(_limb_py.EffectorParameter_scale_get, _limb_py.EffectorParameter_scale_set)

    def __init__(self):
        this = _limb_py.new_EffectorParameter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_EffectorParameter
    __del__ = lambda self: None
EffectorParameter_swigregister = _limb_py.EffectorParameter_swigregister
EffectorParameter_swigregister(EffectorParameter)

class JoyDebugKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JoyDebugKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JoyDebugKey, name)
    __repr__ = _swig_repr
    __swig_setmethods__["time_forward"] = _limb_py.JoyDebugKey_time_forward_set
    __swig_getmethods__["time_forward"] = _limb_py.JoyDebugKey_time_forward_get
    if _newclass:
        time_forward = _swig_property(_limb_py.JoyDebugKey_time_forward_get, _limb_py.JoyDebugKey_time_forward_set)
    __swig_setmethods__["time_backward"] = _limb_py.JoyDebugKey_time_backward_set
    __swig_getmethods__["time_backward"] = _limb_py.JoyDebugKey_time_backward_get
    if _newclass:
        time_backward = _swig_property(_limb_py.JoyDebugKey_time_backward_get, _limb_py.JoyDebugKey_time_backward_set)
    __swig_setmethods__["velocity_forward"] = _limb_py.JoyDebugKey_velocity_forward_set
    __swig_getmethods__["velocity_forward"] = _limb_py.JoyDebugKey_velocity_forward_get
    if _newclass:
        velocity_forward = _swig_property(_limb_py.JoyDebugKey_velocity_forward_get, _limb_py.JoyDebugKey_velocity_forward_set)
    __swig_setmethods__["velocity_backward"] = _limb_py.JoyDebugKey_velocity_backward_set
    __swig_getmethods__["velocity_backward"] = _limb_py.JoyDebugKey_velocity_backward_get
    if _newclass:
        velocity_backward = _swig_property(_limb_py.JoyDebugKey_velocity_backward_get, _limb_py.JoyDebugKey_velocity_backward_set)

    def __init__(self):
        this = _limb_py.new_JoyDebugKey()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_JoyDebugKey
    __del__ = lambda self: None
JoyDebugKey_swigregister = _limb_py.JoyDebugKey_swigregister
JoyDebugKey_swigregister(JoyDebugKey)

class Config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config, name)
    __repr__ = _swig_repr
    __swig_setmethods__["config_file_path"] = _limb_py.Config_config_file_path_set
    __swig_getmethods__["config_file_path"] = _limb_py.Config_config_file_path_get
    if _newclass:
        config_file_path = _swig_property(_limb_py.Config_config_file_path_get, _limb_py.Config_config_file_path_set)
    __swig_setmethods__["_BasicParameter"] = _limb_py.Config__BasicParameter_set
    __swig_getmethods__["_BasicParameter"] = _limb_py.Config__BasicParameter_get
    if _newclass:
        _BasicParameter = _swig_property(_limb_py.Config__BasicParameter_get, _limb_py.Config__BasicParameter_set)
    __swig_setmethods__["_JointParameter"] = _limb_py.Config__JointParameter_set
    __swig_getmethods__["_JointParameter"] = _limb_py.Config__JointParameter_get
    if _newclass:
        _JointParameter = _swig_property(_limb_py.Config__JointParameter_get, _limb_py.Config__JointParameter_set)
    __swig_setmethods__["_JointState"] = _limb_py.Config__JointState_set
    __swig_getmethods__["_JointState"] = _limb_py.Config__JointState_get
    if _newclass:
        _JointState = _swig_property(_limb_py.Config__JointState_get, _limb_py.Config__JointState_set)
    __swig_setmethods__["_EndpointState"] = _limb_py.Config__EndpointState_set
    __swig_getmethods__["_EndpointState"] = _limb_py.Config__EndpointState_get
    if _newclass:
        _EndpointState = _swig_property(_limb_py.Config__EndpointState_get, _limb_py.Config__EndpointState_set)
    __swig_setmethods__["_KinematicsParameter"] = _limb_py.Config__KinematicsParameter_set
    __swig_getmethods__["_KinematicsParameter"] = _limb_py.Config__KinematicsParameter_get
    if _newclass:
        _KinematicsParameter = _swig_property(_limb_py.Config__KinematicsParameter_get, _limb_py.Config__KinematicsParameter_set)
    __swig_setmethods__["_DynamicsParameter"] = _limb_py.Config__DynamicsParameter_set
    __swig_getmethods__["_DynamicsParameter"] = _limb_py.Config__DynamicsParameter_get
    if _newclass:
        _DynamicsParameter = _swig_property(_limb_py.Config__DynamicsParameter_get, _limb_py.Config__DynamicsParameter_set)
    __swig_setmethods__["_Hardware"] = _limb_py.Config__Hardware_set
    __swig_getmethods__["_Hardware"] = _limb_py.Config__Hardware_get
    if _newclass:
        _Hardware = _swig_property(_limb_py.Config__Hardware_get, _limb_py.Config__Hardware_set)
    __swig_setmethods__["_VisualObject"] = _limb_py.Config__VisualObject_set
    __swig_getmethods__["_VisualObject"] = _limb_py.Config__VisualObject_get
    if _newclass:
        _VisualObject = _swig_property(_limb_py.Config__VisualObject_get, _limb_py.Config__VisualObject_set)
    __swig_setmethods__["_EffectorParameter"] = _limb_py.Config__EffectorParameter_set
    __swig_getmethods__["_EffectorParameter"] = _limb_py.Config__EffectorParameter_get
    if _newclass:
        _EffectorParameter = _swig_property(_limb_py.Config__EffectorParameter_get, _limb_py.Config__EffectorParameter_set)
    __swig_setmethods__["n"] = _limb_py.Config_n_set
    __swig_getmethods__["n"] = _limb_py.Config_n_get
    if _newclass:
        n = _swig_property(_limb_py.Config_n_get, _limb_py.Config_n_set)
    __swig_setmethods__["debug"] = _limb_py.Config_debug_set
    __swig_getmethods__["debug"] = _limb_py.Config_debug_get
    if _newclass:
        debug = _swig_property(_limb_py.Config_debug_get, _limb_py.Config_debug_set)
    __swig_setmethods__["time_start"] = _limb_py.Config_time_start_set
    __swig_getmethods__["time_start"] = _limb_py.Config_time_start_get
    if _newclass:
        time_start = _swig_property(_limb_py.Config_time_start_get, _limb_py.Config_time_start_set)
    __swig_setmethods__["time_now"] = _limb_py.Config_time_now_set
    __swig_getmethods__["time_now"] = _limb_py.Config_time_now_get
    if _newclass:
        time_now = _swig_property(_limb_py.Config_time_now_get, _limb_py.Config_time_now_set)
    __swig_setmethods__["node_name"] = _limb_py.Config_node_name_set
    __swig_getmethods__["node_name"] = _limb_py.Config_node_name_get
    if _newclass:
        node_name = _swig_property(_limb_py.Config_node_name_get, _limb_py.Config_node_name_set)
    __swig_setmethods__["visual_tools_"] = _limb_py.Config_visual_tools__set
    __swig_getmethods__["visual_tools_"] = _limb_py.Config_visual_tools__get
    if _newclass:
        visual_tools_ = _swig_property(_limb_py.Config_visual_tools__get, _limb_py.Config_visual_tools__set)

    def __init__(self, *args):
        this = _limb_py.new_Config(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def configInit(self, filePathName: 'std::string const &') -> "void":
        return _limb_py.Config_configInit(self, filePathName)
    __swig_destroy__ = _limb_py.delete_Config
    __del__ = lambda self: None

    def getFilePath(self) -> "std::string":
        return _limb_py.Config_getFilePath(self)

    def getDoF(self) -> "int":
        return _limb_py.Config_getDoF(self)

    def getInterfaceType(self) -> "std::string":
        return _limb_py.Config_getInterfaceType(self)

    def getLimbName(self) -> "std::string":
        return _limb_py.Config_getLimbName(self)

    def getLimbType(self) -> "std::string":
        return _limb_py.Config_getLimbType(self)

    def getLimbArmType(self) -> "LimbArmType":
        return _limb_py.Config_getLimbArmType(self)

    def getNodeName(self) -> "std::string":
        return _limb_py.Config_getNodeName(self)

    def getControlFrequency(self) -> "int":
        return _limb_py.Config_getControlFrequency(self)

    def getDt(self) -> "double":
        return _limb_py.Config_getDt(self)

    def getLimitVelocityScale(self) -> "double":
        return _limb_py.Config_getLimitVelocityScale(self)

    def getLimitAccelerationScale(self) -> "double":
        return _limb_py.Config_getLimitAccelerationScale(self)

    def getLimitTorqueScale(self) -> "double":
        return _limb_py.Config_getLimitTorqueScale(self)

    def getJointName(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _limb_py.Config_getJointName(self)

    def getJointLowerPosition(self) -> "std::vector< double,std::allocator< double > >":
        return _limb_py.Config_getJointLowerPosition(self)

    def getJointUpperPosition(self) -> "std::vector< double,std::allocator< double > >":
        return _limb_py.Config_getJointUpperPosition(self)

    def getJointHomePosition(self) -> "std::vector< double,std::allocator< double > >":
        return _limb_py.Config_getJointHomePosition(self)

    def getJointLimitVelocity(self) -> "std::vector< double,std::allocator< double > >":
        return _limb_py.Config_getJointLimitVelocity(self)

    def getJointLimitAcceleration(self) -> "std::vector< double,std::allocator< double > >":
        return _limb_py.Config_getJointLimitAcceleration(self)

    def getJointLimitTorque(self) -> "std::vector< double,std::allocator< double > >":
        return _limb_py.Config_getJointLimitTorque(self)

    def getJointDirection(self) -> "std::vector< int,std::allocator< int > >":
        return _limb_py.Config_getJointDirection(self)

    def getJointOffset(self) -> "std::vector< double,std::allocator< double > >":
        return _limb_py.Config_getJointOffset(self)

    def getJointMimic(self) -> "std::vector< int,std::allocator< int > >":
        return _limb_py.Config_getJointMimic(self)

    def limitMimicJoint(self, *args) -> "Eigen::VectorXd":
        return _limb_py.Config_limitMimicJoint(self, *args)

    def getDhA(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getDhA(self)

    def getDhD(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getDhD(self)

    def getDhAlpha(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getDhAlpha(self)

    def getDhTheta(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getDhTheta(self)

    def getCurrentJointPosition(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getCurrentJointPosition(self)

    def getCurrentJointVelocity(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getCurrentJointVelocity(self)

    def getCurrentJointTorque(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getCurrentJointTorque(self)

    def getCurrentJointCurrentTorque(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getCurrentJointCurrentTorque(self)

    def getCurrentJointAcceleration(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getCurrentJointAcceleration(self)

    def getCurrentJointFilterPosition(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getCurrentJointFilterPosition(self)

    def getCurrentJointFilterVelocity(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getCurrentJointFilterVelocity(self)

    def getCurrentJointFilterAcceleration(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getCurrentJointFilterAcceleration(self)

    def getCommandJointPosition(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getCommandJointPosition(self)

    def getCommandJointVelocity(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getCommandJointVelocity(self)

    def getCommandJointAcceleration(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getCommandJointAcceleration(self)

    def getCommandJointTorque(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getCommandJointTorque(self)

    def getCommandJointCurrentTorque(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getCommandJointCurrentTorque(self)

    def getEndpointRPYPose(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getEndpointRPYPose(self)

    def getEndpointQuaternionPose(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getEndpointQuaternionPose(self)

    def getEndpointTwist(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getEndpointTwist(self)

    def getEndpointWrench(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getEndpointWrench(self)

    def getEndpointCurrentRPYPose(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getEndpointCurrentRPYPose(self)

    def getEndpointCurrentQuaternionPose(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getEndpointCurrentQuaternionPose(self)

    def getEndpointCurrentTwist(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getEndpointCurrentTwist(self)

    def getEndpointCurrentWrench(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getEndpointCurrentWrench(self)

    def getEndpointCommandRPYPose(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getEndpointCommandRPYPose(self)

    def getEndpointCommandQuaternionPose(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getEndpointCommandQuaternionPose(self)

    def getEndpointCommandTwist(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getEndpointCommandTwist(self)

    def getEndpointCommandWrench(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getEndpointCommandWrench(self)

    def getEndpointFTWrenchTool(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getEndpointFTWrenchTool(self)

    def getEndpointFTWrenchWorld(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getEndpointFTWrenchWorld(self)

    def getCalDynamicsTorque(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getCalDynamicsTorque(self)

    def getCalGravityTorque(self) -> "Eigen::VectorXd":
        return _limb_py.Config_getCalGravityTorque(self)

    def getTorso2Base(self) -> "Eigen::Matrix4d":
        return _limb_py.Config_getTorso2Base(self)

    def getTool2Effector(self) -> "Eigen::Matrix4d":
        return _limb_py.Config_getTool2Effector(self)

    def getVisualObjectPose(self, *args) -> "Eigen::VectorXd":
        return _limb_py.Config_getVisualObjectPose(self, *args)

    def getVisualObjectPosePython(self, id: 'std::string') -> "Eigen::VectorXd":
        return _limb_py.Config_getVisualObjectPosePython(self, id)

    def getVisualObjectTraj(self, id: 'std::string') -> "ObjectTraj":
        return _limb_py.Config_getVisualObjectTraj(self, id)

    def getTactileState(self, tactile_id: 'int', value: 'IntVector') -> "bool":
        return _limb_py.Config_getTactileState(self, tactile_id, value)

    def getPerceptionVisionPose(self, t: 'double &', pose: 'vector_vector_double') -> "bool":
        return _limb_py.Config_getPerceptionVisionPose(self, t, pose)

    def getEffectorMode(self) -> "std::string":
        return _limb_py.Config_getEffectorMode(self)

    def getEffectorScale(self) -> "double":
        return _limb_py.Config_getEffectorScale(self)

    def getVisualObjectPoseTorso(self, *args) -> "Eigen::VectorXd":
        return _limb_py.Config_getVisualObjectPoseTorso(self, *args)

    def getVisualObjectPoseTorsoPython(self, id: 'std::string') -> "Eigen::VectorXd":
        return _limb_py.Config_getVisualObjectPoseTorsoPython(self, id)

    def getMinCollisionDistance(self) -> "double":
        return _limb_py.Config_getMinCollisionDistance(self)

    def getMinCollisionPoint(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        return _limb_py.Config_getMinCollisionPoint(self)

    def setCurrentJointPosition(self, pos: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setCurrentJointPosition(self, pos)

    def setCurrentJointVelocity(self, vel: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setCurrentJointVelocity(self, vel)

    def setCurrentJointTorque(self, tor: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setCurrentJointTorque(self, tor)

    def setCurrentJointCurrentTorque(self, tor: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setCurrentJointCurrentTorque(self, tor)

    def setCurrentJointAcceleration(self, acc: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setCurrentJointAcceleration(self, acc)

    def setCurrentJointFilterPosition(self, pos: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setCurrentJointFilterPosition(self, pos)

    def setCurrentJointFilterVelocity(self, vel: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setCurrentJointFilterVelocity(self, vel)

    def setCurrentJointFilterAcceleration(self, acc: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setCurrentJointFilterAcceleration(self, acc)

    def setCommandJointPosition(self, pos: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setCommandJointPosition(self, pos)

    def setCommandJointVelocity(self, vel: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setCommandJointVelocity(self, vel)

    def setCommandJointTorque(self, tor: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setCommandJointTorque(self, tor)

    def setCommandJointCurrentTorque(self, tor: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setCommandJointCurrentTorque(self, tor)

    def setCommandJointAcceleration(self, acc: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setCommandJointAcceleration(self, acc)

    def setEndpointRPYPose(self, x: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setEndpointRPYPose(self, x)

    def setEndpointQuaternionPose(self, pose: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setEndpointQuaternionPose(self, pose)

    def setEndpointTwist(self, twist: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setEndpointTwist(self, twist)

    def setEndpointWrench(self, wrench: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setEndpointWrench(self, wrench)

    def setEndpointCommandRPYPose(self, x: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setEndpointCommandRPYPose(self, x)

    def setEndpointCommandQuaternionPose(self, pose: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setEndpointCommandQuaternionPose(self, pose)

    def setEndpointCommandTwist(self, twist: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setEndpointCommandTwist(self, twist)

    def setEndpointCommandWrench(self, wrench: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setEndpointCommandWrench(self, wrench)

    def setEndpointFTWrenchTool(self, wrench: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setEndpointFTWrenchTool(self, wrench)

    def setEndpointFTWrenchWorld(self, wrench: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setEndpointFTWrenchWorld(self, wrench)

    def setCalDynamicsTorque(self, torque: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setCalDynamicsTorque(self, torque)

    def setCalGravityTorque(self, torque: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setCalGravityTorque(self, torque)

    def setVisualObjectPose(self, id: 'std::string', pose: 'Eigen::VectorXd', time: 'double') -> "void":
        return _limb_py.Config_setVisualObjectPose(self, id, pose, time)

    def setVisualObjectPoseTorso(self, id: 'std::string', pose: 'Eigen::VectorXd') -> "void":
        return _limb_py.Config_setVisualObjectPoseTorso(self, id, pose)

    def setVisualObjectTrajCollection(self, flag: 'bool'=False) -> "void":
        return _limb_py.Config_setVisualObjectTrajCollection(self, flag)

    def setMinCollisionDistance(self, distance: 'double') -> "void":
        return _limb_py.Config_setMinCollisionDistance(self, distance)

    def setMinCollisionPoint(self, nearest_points: 'vector_vector_double') -> "void":
        return _limb_py.Config_setMinCollisionPoint(self, nearest_points)

    def setEffectorMode(self, mode: 'std::string') -> "void":
        return _limb_py.Config_setEffectorMode(self, mode)

    def setEffectorScale(self, scale: 'double') -> "void":
        return _limb_py.Config_setEffectorScale(self, scale)

    def transEigenVector2Jnt(self, data_in: 'Eigen::VectorXd') -> "KDL::JntArray":
        return _limb_py.Config_transEigenVector2Jnt(self, data_in)

    def transJnt2EigenVector(self, data_in_v: 'KDL::JntArray') -> "Eigen::VectorXd":
        return _limb_py.Config_transJnt2EigenVector(self, data_in_v)

    def transKdlJacobian2Eigen(self, jac: 'KDL::Jacobian const &', jacobian: 'Eigen::MatrixXd *') -> "void":
        return _limb_py.Config_transKdlJacobian2Eigen(self, jac, jacobian)

    def transStd2Eigen(self, data_in_v: 'DoubleVector') -> "Eigen::VectorXd":
        return _limb_py.Config_transStd2Eigen(self, data_in_v)

    def transStd2DoubleArray(self, data_in_v: 'DoubleVector', data: 'double *') -> "void":
        return _limb_py.Config_transStd2DoubleArray(self, data_in_v, data)
    if _newclass:
        transEigen2Std = staticmethod(_limb_py.Config_transEigen2Std)
    else:
        transEigen2Std = _limb_py.Config_transEigen2Std

    def transEigenVector2Double(self, data_in: 'Eigen::VectorXd') -> "double *":
        return _limb_py.Config_transEigenVector2Double(self, data_in)

    def transDouble2EigenVector(self, data_in: 'double *') -> "Eigen::VectorXd":
        return _limb_py.Config_transDouble2EigenVector(self, data_in)
    if _newclass:
        transEigenMatrix2Double = staticmethod(_limb_py.Config_transEigenMatrix2Double)
    else:
        transEigenMatrix2Double = _limb_py.Config_transEigenMatrix2Double
    if _newclass:
        transDouble2EigenMatrix = staticmethod(_limb_py.Config_transDouble2EigenMatrix)
    else:
        transDouble2EigenMatrix = _limb_py.Config_transDouble2EigenMatrix

    def limitPosition(self, pos: 'Eigen::VectorXd') -> "Eigen::VectorXd":
        return _limb_py.Config_limitPosition(self, pos)

    def limitVelocity(self, vel: 'Eigen::VectorXd') -> "Eigen::VectorXd":
        return _limb_py.Config_limitVelocity(self, vel)

    def limitAcceleration(self, acc: 'Eigen::VectorXd') -> "Eigen::VectorXd":
        return _limb_py.Config_limitAcceleration(self, acc)

    def limitTorque(self, tor: 'Eigen::VectorXd') -> "Eigen::VectorXd":
        return _limb_py.Config_limitTorque(self, tor)

    def getTickUs(self) -> "int64_t":
        return _limb_py.Config_getTickUs(self)

    def timeInit(self) -> "void":
        return _limb_py.Config_timeInit(self)

    def getTime(self) -> "double":
        return _limb_py.Config_getTime(self)

    def dealDeadArea(self, original_value: 'DoubleVector', up_dead_area: 'DoubleVector', low_dead_area: 'DoubleVector'=None) -> "void":
        return _limb_py.Config_dealDeadArea(self, original_value, up_dead_area, low_dead_area)

    def debugData(self, *args) -> "void":
        return _limb_py.Config_debugData(self, *args)

    def visualObjectSubscriber(self, msg: 'limb_core_msgs::MarkerStringArray const &') -> "void":
        return _limb_py.Config_visualObjectSubscriber(self, msg)

    def visualObjectInit(self, config: 'YAML::Node') -> "void":
        return _limb_py.Config_visualObjectInit(self, config)

    def rvizVisualToolInit(self, base_frame: 'std::string') -> "void":
        return _limb_py.Config_rvizVisualToolInit(self, base_frame)

    def publishRvizSphere(self, pos: 'Eigen::Vector3d', color: 'rviz_visual_tools::colors') -> "void":
        return _limb_py.Config_publishRvizSphere(self, pos, color)

    def UpdateVisualObjectInfoAtEndpoint(self, id: 'std::string const &', description: 'std::string const &', object_in_hand: 'std::string const &') -> "void":
        return _limb_py.Config_UpdateVisualObjectInfoAtEndpoint(self, id, description, object_in_hand)
Config_swigregister = _limb_py.Config_swigregister
Config_swigregister(Config)

def Config_transEigen2Std(data_in: 'Eigen::VectorXd') -> "std::vector< double,std::allocator< double > >":
    return _limb_py.Config_transEigen2Std(data_in)
Config_transEigen2Std = _limb_py.Config_transEigen2Std

def Config_transEigenMatrix2Double(data_in: 'Eigen::MatrixXd') -> "double *":
    return _limb_py.Config_transEigenMatrix2Double(data_in)
Config_transEigenMatrix2Double = _limb_py.Config_transEigenMatrix2Double

def Config_transDouble2EigenMatrix(data_in: 'double *', rows: 'uint', cols: 'uint') -> "Eigen::MatrixXd":
    return _limb_py.Config_transDouble2EigenMatrix(data_in, rows, cols)
Config_transDouble2EigenMatrix = _limb_py.Config_transDouble2EigenMatrix

class KalmanState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KalmanState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KalmanState, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _limb_py.KalmanState_x_set
    __swig_getmethods__["x"] = _limb_py.KalmanState_x_get
    if _newclass:
        x = _swig_property(_limb_py.KalmanState_x_get, _limb_py.KalmanState_x_set)
    __swig_setmethods__["A"] = _limb_py.KalmanState_A_set
    __swig_getmethods__["A"] = _limb_py.KalmanState_A_get
    if _newclass:
        A = _swig_property(_limb_py.KalmanState_A_get, _limb_py.KalmanState_A_set)
    __swig_setmethods__["H"] = _limb_py.KalmanState_H_set
    __swig_getmethods__["H"] = _limb_py.KalmanState_H_get
    if _newclass:
        H = _swig_property(_limb_py.KalmanState_H_get, _limb_py.KalmanState_H_set)
    __swig_setmethods__["q"] = _limb_py.KalmanState_q_set
    __swig_getmethods__["q"] = _limb_py.KalmanState_q_get
    if _newclass:
        q = _swig_property(_limb_py.KalmanState_q_get, _limb_py.KalmanState_q_set)
    __swig_setmethods__["r"] = _limb_py.KalmanState_r_set
    __swig_getmethods__["r"] = _limb_py.KalmanState_r_get
    if _newclass:
        r = _swig_property(_limb_py.KalmanState_r_get, _limb_py.KalmanState_r_set)
    __swig_setmethods__["p"] = _limb_py.KalmanState_p_set
    __swig_getmethods__["p"] = _limb_py.KalmanState_p_get
    if _newclass:
        p = _swig_property(_limb_py.KalmanState_p_get, _limb_py.KalmanState_p_set)
    __swig_setmethods__["gain"] = _limb_py.KalmanState_gain_set
    __swig_getmethods__["gain"] = _limb_py.KalmanState_gain_get
    if _newclass:
        gain = _swig_property(_limb_py.KalmanState_gain_get, _limb_py.KalmanState_gain_set)

    def __init__(self):
        this = _limb_py.new_KalmanState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_KalmanState
    __del__ = lambda self: None
KalmanState_swigregister = _limb_py.KalmanState_swigregister
KalmanState_swigregister(KalmanState)

class KalmanStates(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KalmanStates, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KalmanStates, name)
    __repr__ = _swig_repr
    __swig_setmethods__["kalman_state"] = _limb_py.KalmanStates_kalman_state_set
    __swig_getmethods__["kalman_state"] = _limb_py.KalmanStates_kalman_state_get
    if _newclass:
        kalman_state = _swig_property(_limb_py.KalmanStates_kalman_state_get, _limb_py.KalmanStates_kalman_state_set)

    def __init__(self):
        this = _limb_py.new_KalmanStates()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_KalmanStates
    __del__ = lambda self: None
KalmanStates_swigregister = _limb_py.KalmanStates_swigregister
KalmanStates_swigregister(KalmanStates)

class Filter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Filter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Filter, name)
    __repr__ = _swig_repr

    def __init__(self, filter_factor: 'DoubleVector'):
        this = _limb_py.new_Filter(filter_factor)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_Filter
    __del__ = lambda self: None

    def filterData(self, cur_vec: 'DoubleVector') -> "void":
        return _limb_py.Filter_filterData(self, cur_vec)
Filter_swigregister = _limb_py.Filter_swigregister
Filter_swigregister(Filter)

class Transformer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Transformer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Transformer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_config"] = _limb_py.Transformer__config_set
    __swig_getmethods__["_config"] = _limb_py.Transformer__config_get
    if _newclass:
        _config = _swig_property(_limb_py.Transformer__config_get, _limb_py.Transformer__config_set)
    __swig_setmethods__["mJointCurrentPositionKalmanFilter"] = _limb_py.Transformer_mJointCurrentPositionKalmanFilter_set
    __swig_getmethods__["mJointCurrentPositionKalmanFilter"] = _limb_py.Transformer_mJointCurrentPositionKalmanFilter_get
    if _newclass:
        mJointCurrentPositionKalmanFilter = _swig_property(_limb_py.Transformer_mJointCurrentPositionKalmanFilter_get, _limb_py.Transformer_mJointCurrentPositionKalmanFilter_set)
    __swig_setmethods__["mJointCommandPositionKalmanFilter"] = _limb_py.Transformer_mJointCommandPositionKalmanFilter_set
    __swig_getmethods__["mJointCommandPositionKalmanFilter"] = _limb_py.Transformer_mJointCommandPositionKalmanFilter_get
    if _newclass:
        mJointCommandPositionKalmanFilter = _swig_property(_limb_py.Transformer_mJointCommandPositionKalmanFilter_get, _limb_py.Transformer_mJointCommandPositionKalmanFilter_set)
    __swig_setmethods__["mJointCurrentVelocityKalmanFilter"] = _limb_py.Transformer_mJointCurrentVelocityKalmanFilter_set
    __swig_getmethods__["mJointCurrentVelocityKalmanFilter"] = _limb_py.Transformer_mJointCurrentVelocityKalmanFilter_get
    if _newclass:
        mJointCurrentVelocityKalmanFilter = _swig_property(_limb_py.Transformer_mJointCurrentVelocityKalmanFilter_get, _limb_py.Transformer_mJointCurrentVelocityKalmanFilter_set)
    __swig_setmethods__["mJointCommandVelocityKalmanFilter"] = _limb_py.Transformer_mJointCommandVelocityKalmanFilter_set
    __swig_getmethods__["mJointCommandVelocityKalmanFilter"] = _limb_py.Transformer_mJointCommandVelocityKalmanFilter_get
    if _newclass:
        mJointCommandVelocityKalmanFilter = _swig_property(_limb_py.Transformer_mJointCommandVelocityKalmanFilter_get, _limb_py.Transformer_mJointCommandVelocityKalmanFilter_set)

    def __init__(self, *args):
        this = _limb_py.new_Transformer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def calKalmanFilterInit(self, *args) -> "void":
        return _limb_py.Transformer_calKalmanFilterInit(self, *args)

    def calKalmanFilter(self, *args) -> "void":
        return _limb_py.Transformer_calKalmanFilter(self, *args)

    def calJointPositionKalmanFilterInit(self, init_q: 'Eigen::VectorXd', init_qv: 'Eigen::VectorXd', Q: 'Eigen::VectorXd', R: 'Eigen::VectorXd', cmd: 'bool') -> "void":
        return _limb_py.Transformer_calJointPositionKalmanFilterInit(self, init_q, init_qv, Q, R, cmd)

    def calJointVelocityKalmanFilterInit(self, init_qv: 'Eigen::VectorXd', init_qa: 'Eigen::VectorXd', Q: 'Eigen::VectorXd', R: 'Eigen::VectorXd', cmd: 'bool') -> "void":
        return _limb_py.Transformer_calJointVelocityKalmanFilterInit(self, init_qv, init_qa, Q, R, cmd)

    def calJointPositionKalmanFilter(self, q: 'Eigen::VectorXd', qout: 'double *', qvout: 'double *', cmd: 'bool') -> "void":
        return _limb_py.Transformer_calJointPositionKalmanFilter(self, q, qout, qvout, cmd)

    def calJointVelocityKalmanFilter(self, qv: 'Eigen::VectorXd', qvout: 'double *', qaout: 'double *', cmd: 'bool') -> "void":
        return _limb_py.Transformer_calJointVelocityKalmanFilter(self, qv, qvout, qaout, cmd)

    def calJointKalmanFilterInit(self, init_q: 'Eigen::VectorXd', init_qv: 'Eigen::VectorXd', init_qa: 'Eigen::VectorXd', Q: 'double', R: 'double', cmd: 'bool') -> "void":
        return _limb_py.Transformer_calJointKalmanFilterInit(self, init_q, init_qv, init_qa, Q, R, cmd)

    def calJointKalmanFilter(self, q: 'Eigen::VectorXd', frequency: 'int', cmd: 'bool') -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        return _limb_py.Transformer_calJointKalmanFilter(self, q, frequency, cmd)
    __swig_destroy__ = _limb_py.delete_Transformer
    __del__ = lambda self: None
Transformer_swigregister = _limb_py.Transformer_swigregister
Transformer_swigregister(Transformer)

class KinematicsTrans(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KinematicsTrans, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KinematicsTrans, name)
    __repr__ = _swig_repr
    if _newclass:
        DH2TMatrix = staticmethod(_limb_py.KinematicsTrans_DH2TMatrix)
    else:
        DH2TMatrix = _limb_py.KinematicsTrans_DH2TMatrix
    if _newclass:
        TMatrix = staticmethod(_limb_py.KinematicsTrans_TMatrix)
    else:
        TMatrix = _limb_py.KinematicsTrans_TMatrix
    if _newclass:
        transPosition2TMatrix = staticmethod(_limb_py.KinematicsTrans_transPosition2TMatrix)
    else:
        transPosition2TMatrix = _limb_py.KinematicsTrans_transPosition2TMatrix
    if _newclass:
        transTMatrix2RPYPose = staticmethod(_limb_py.KinematicsTrans_transTMatrix2RPYPose)
    else:
        transTMatrix2RPYPose = _limb_py.KinematicsTrans_transTMatrix2RPYPose
    if _newclass:
        transTMatrix2RPY = staticmethod(_limb_py.KinematicsTrans_transTMatrix2RPY)
    else:
        transTMatrix2RPY = _limb_py.KinematicsTrans_transTMatrix2RPY
    if _newclass:
        transTMatrix2Position = staticmethod(_limb_py.KinematicsTrans_transTMatrix2Position)
    else:
        transTMatrix2Position = _limb_py.KinematicsTrans_transTMatrix2Position
    if _newclass:
        transQuaternion2TMatrix = staticmethod(_limb_py.KinematicsTrans_transQuaternion2TMatrix)
    else:
        transQuaternion2TMatrix = _limb_py.KinematicsTrans_transQuaternion2TMatrix
    if _newclass:
        transTMatrix2Quaternion = staticmethod(_limb_py.KinematicsTrans_transTMatrix2Quaternion)
    else:
        transTMatrix2Quaternion = _limb_py.KinematicsTrans_transTMatrix2Quaternion
    if _newclass:
        transTMatrix2Axis = staticmethod(_limb_py.KinematicsTrans_transTMatrix2Axis)
    else:
        transTMatrix2Axis = _limb_py.KinematicsTrans_transTMatrix2Axis
    if _newclass:
        transRPYPose2TMatrix = staticmethod(_limb_py.KinematicsTrans_transRPYPose2TMatrix)
    else:
        transRPYPose2TMatrix = _limb_py.KinematicsTrans_transRPYPose2TMatrix
    if _newclass:
        transTMatrix2QuaternionPose = staticmethod(_limb_py.KinematicsTrans_transTMatrix2QuaternionPose)
    else:
        transTMatrix2QuaternionPose = _limb_py.KinematicsTrans_transTMatrix2QuaternionPose
    if _newclass:
        transQuaternionPose2TMatrix = staticmethod(_limb_py.KinematicsTrans_transQuaternionPose2TMatrix)
    else:
        transQuaternionPose2TMatrix = _limb_py.KinematicsTrans_transQuaternionPose2TMatrix
    if _newclass:
        transQuaternionPose2RPYPose = staticmethod(_limb_py.KinematicsTrans_transQuaternionPose2RPYPose)
    else:
        transQuaternionPose2RPYPose = _limb_py.KinematicsTrans_transQuaternionPose2RPYPose
    if _newclass:
        transQuaternionPoseInverse = staticmethod(_limb_py.KinematicsTrans_transQuaternionPoseInverse)
    else:
        transQuaternionPoseInverse = _limb_py.KinematicsTrans_transQuaternionPoseInverse
    if _newclass:
        sgn = staticmethod(_limb_py.KinematicsTrans_sgn)
    else:
        sgn = _limb_py.KinematicsTrans_sgn

    def __init__(self):
        this = _limb_py.new_KinematicsTrans()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_KinematicsTrans
    __del__ = lambda self: None
KinematicsTrans_swigregister = _limb_py.KinematicsTrans_swigregister
KinematicsTrans_swigregister(KinematicsTrans)

def KinematicsTrans_DH2TMatrix(q: 'double', dh: 'DHParameter') -> "Eigen::Matrix4d":
    return _limb_py.KinematicsTrans_DH2TMatrix(q, dh)
KinematicsTrans_DH2TMatrix = _limb_py.KinematicsTrans_DH2TMatrix

def KinematicsTrans_TMatrix(*args) -> "Eigen::Matrix4d":
    return _limb_py.KinematicsTrans_TMatrix(*args)
KinematicsTrans_TMatrix = _limb_py.KinematicsTrans_TMatrix

def KinematicsTrans_transPosition2TMatrix(*args) -> "Eigen::Matrix4d":
    return _limb_py.KinematicsTrans_transPosition2TMatrix(*args)
KinematicsTrans_transPosition2TMatrix = _limb_py.KinematicsTrans_transPosition2TMatrix

def KinematicsTrans_transTMatrix2RPYPose(*args) -> "Eigen::VectorXd":
    return _limb_py.KinematicsTrans_transTMatrix2RPYPose(*args)
KinematicsTrans_transTMatrix2RPYPose = _limb_py.KinematicsTrans_transTMatrix2RPYPose

def KinematicsTrans_transTMatrix2RPY(*args) -> "Eigen::Vector3d":
    return _limb_py.KinematicsTrans_transTMatrix2RPY(*args)
KinematicsTrans_transTMatrix2RPY = _limb_py.KinematicsTrans_transTMatrix2RPY

def KinematicsTrans_transTMatrix2Position(T: 'Eigen::Matrix4d') -> "Eigen::Vector3d":
    return _limb_py.KinematicsTrans_transTMatrix2Position(T)
KinematicsTrans_transTMatrix2Position = _limb_py.KinematicsTrans_transTMatrix2Position

def KinematicsTrans_transQuaternion2TMatrix(quat: 'Eigen::VectorXd') -> "Eigen::Matrix4d":
    return _limb_py.KinematicsTrans_transQuaternion2TMatrix(quat)
KinematicsTrans_transQuaternion2TMatrix = _limb_py.KinematicsTrans_transQuaternion2TMatrix

def KinematicsTrans_transTMatrix2Quaternion(T: 'Eigen::MatrixXd') -> "Eigen::VectorXd":
    return _limb_py.KinematicsTrans_transTMatrix2Quaternion(T)
KinematicsTrans_transTMatrix2Quaternion = _limb_py.KinematicsTrans_transTMatrix2Quaternion

def KinematicsTrans_transTMatrix2Axis(T: 'Eigen::MatrixXd') -> "Eigen::VectorXd":
    return _limb_py.KinematicsTrans_transTMatrix2Axis(T)
KinematicsTrans_transTMatrix2Axis = _limb_py.KinematicsTrans_transTMatrix2Axis

def KinematicsTrans_transRPYPose2TMatrix(rpy_pose: 'Eigen::VectorXd') -> "Eigen::Matrix4d":
    return _limb_py.KinematicsTrans_transRPYPose2TMatrix(rpy_pose)
KinematicsTrans_transRPYPose2TMatrix = _limb_py.KinematicsTrans_transRPYPose2TMatrix

def KinematicsTrans_transTMatrix2QuaternionPose(T: 'Eigen::MatrixXd') -> "Eigen::VectorXd":
    return _limb_py.KinematicsTrans_transTMatrix2QuaternionPose(T)
KinematicsTrans_transTMatrix2QuaternionPose = _limb_py.KinematicsTrans_transTMatrix2QuaternionPose

def KinematicsTrans_transQuaternionPose2TMatrix(pose: 'Eigen::VectorXd') -> "Eigen::MatrixXd":
    return _limb_py.KinematicsTrans_transQuaternionPose2TMatrix(pose)
KinematicsTrans_transQuaternionPose2TMatrix = _limb_py.KinematicsTrans_transQuaternionPose2TMatrix

def KinematicsTrans_transQuaternionPose2RPYPose(pose: 'Eigen::VectorXd') -> "Eigen::VectorXd":
    return _limb_py.KinematicsTrans_transQuaternionPose2RPYPose(pose)
KinematicsTrans_transQuaternionPose2RPYPose = _limb_py.KinematicsTrans_transQuaternionPose2RPYPose

def KinematicsTrans_transQuaternionPoseInverse(pose: 'Eigen::VectorXd') -> "Eigen::VectorXd":
    return _limb_py.KinematicsTrans_transQuaternionPoseInverse(pose)
KinematicsTrans_transQuaternionPoseInverse = _limb_py.KinematicsTrans_transQuaternionPoseInverse

def KinematicsTrans_sgn(x: 'double') -> "int":
    return _limb_py.KinematicsTrans_sgn(x)
KinematicsTrans_sgn = _limb_py.KinematicsTrans_sgn

class Kinematics(KinematicsTrans):
    __swig_setmethods__ = {}
    for _s in [KinematicsTrans]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Kinematics, name, value)
    __swig_getmethods__ = {}
    for _s in [KinematicsTrans]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Kinematics, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_config"] = _limb_py.Kinematics__config_set
    __swig_getmethods__["_config"] = _limb_py.Kinematics__config_get
    if _newclass:
        _config = _swig_property(_limb_py.Kinematics__config_get, _limb_py.Kinematics__config_set)

    def __init__(self, *args):
        this = _limb_py.new_Kinematics(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_Kinematics
    __del__ = lambda self: None

    def calForwardKinematicsDH(self, q: 'Eigen::VectorXd', dh: 'DHParameter', joint_num: 'int') -> "Eigen::Matrix4d":
        return _limb_py.Kinematics_calForwardKinematicsDH(self, q, dh, joint_num)

    def calForwardKinematicsKDL(self, *args) -> "Eigen::MatrixXd":
        return _limb_py.Kinematics_calForwardKinematicsKDL(self, *args)

    def calForwardKinematicsUR(self, q: 'Eigen::VectorXd', torso: 'bool'=True) -> "Eigen::MatrixXd":
        return _limb_py.Kinematics_calForwardKinematicsUR(self, q, torso)

    def calForwardKinematicsIRB1100(self, q: 'Eigen::VectorXd', torso: 'bool'=True) -> "Eigen::MatrixXd":
        return _limb_py.Kinematics_calForwardKinematicsIRB1100(self, q, torso)

    def calForwardKinematics(self, q: 'Eigen::VectorXd', torso: 'bool'=True) -> "Eigen::MatrixXd":
        return _limb_py.Kinematics_calForwardKinematics(self, q, torso)

    def calJacobian(self, *args) -> "Eigen::MatrixXd":
        return _limb_py.Kinematics_calJacobian(self, *args)

    def calJacobianKDL(self, *args) -> "Eigen::MatrixXd":
        return _limb_py.Kinematics_calJacobianKDL(self, *args)

    def calInverseKinematics(self, *args) -> "Eigen::VectorXd":
        return _limb_py.Kinematics_calInverseKinematics(self, *args)

    def calInverseKinematicsUR(self, *args) -> "Eigen::VectorXd":
        return _limb_py.Kinematics_calInverseKinematicsUR(self, *args)

    def calInverseKinematicsIRB1100(self, *args) -> "Eigen::VectorXd":
        return _limb_py.Kinematics_calInverseKinematicsIRB1100(self, *args)

    def calInverseKinematicsKDL(self, *args) -> "Eigen::VectorXd":
        return _limb_py.Kinematics_calInverseKinematicsKDL(self, *args)

    def calInverseKinematicsNum(self, *args) -> "Eigen::VectorXd":
        return _limb_py.Kinematics_calInverseKinematicsNum(self, *args)

    def transBase2Tool(self, Tbase2tool: 'Eigen::MatrixXd', dx_base: 'Eigen::VectorXd') -> "Eigen::VectorXd":
        return _limb_py.Kinematics_transBase2Tool(self, Tbase2tool, dx_base)

    def transTool2Base(self, Tbase2tool: 'Eigen::MatrixXd', dx_tool: 'Eigen::VectorXd') -> "Eigen::VectorXd":
        return _limb_py.Kinematics_transTool2Base(self, Tbase2tool, dx_tool)

    def transBase2Torso(self, dx_base: 'Eigen::VectorXd') -> "Eigen::VectorXd":
        return _limb_py.Kinematics_transBase2Torso(self, dx_base)

    def transTorso2Base(self, dx_torso: 'Eigen::VectorXd') -> "Eigen::VectorXd":
        return _limb_py.Kinematics_transTorso2Base(self, dx_torso)

    def transVisualPose2Torso(self, *args) -> "Eigen::VectorXd":
        return _limb_py.Kinematics_transVisualPose2Torso(self, *args)

    def inverseJacobianNull(self, q: 'Eigen::VectorXd', dx: 'Eigen::VectorXd', k_null: 'double') -> "Eigen::VectorXd":
        return _limb_py.Kinematics_inverseJacobianNull(self, q, dx, k_null)

    def calEndpointRPYPose(self, *args) -> "Eigen::VectorXd":
        return _limb_py.Kinematics_calEndpointRPYPose(self, *args)

    def calEndpointQuaternionPose(self, *args) -> "Eigen::VectorXd":
        return _limb_py.Kinematics_calEndpointQuaternionPose(self, *args)

    def calEndpointTwist(self, *args) -> "Eigen::VectorXd":
        return _limb_py.Kinematics_calEndpointTwist(self, *args)

    def calEndpointWrenchInTorso(self, *args) -> "Eigen::VectorXd":
        return _limb_py.Kinematics_calEndpointWrenchInTorso(self, *args)

    def calEndpointWrenchInTorsoKinovaGen3(self, update_config: 'bool', cmd: 'bool'=False) -> "Eigen::VectorXd":
        return _limb_py.Kinematics_calEndpointWrenchInTorsoKinovaGen3(self, update_config, cmd)

    def calRelativePoseAddTool(self, pose1: 'Eigen::VectorXd', pose2: 'Eigen::VectorXd') -> "Eigen::VectorXd":
        return _limb_py.Kinematics_calRelativePoseAddTool(self, pose1, pose2)

    def calRelativePoseAddWorld(self, pose1: 'Eigen::VectorXd', pose2: 'Eigen::VectorXd') -> "Eigen::VectorXd":
        return _limb_py.Kinematics_calRelativePoseAddWorld(self, pose1, pose2)

    def calRelativePoseSubLeftTool(self, pose1: 'Eigen::VectorXd', pose2: 'Eigen::VectorXd') -> "Eigen::VectorXd":
        return _limb_py.Kinematics_calRelativePoseSubLeftTool(self, pose1, pose2)

    def calRelativePoseSubRightTool(self, pose1: 'Eigen::VectorXd', pose2: 'Eigen::VectorXd') -> "Eigen::VectorXd":
        return _limb_py.Kinematics_calRelativePoseSubRightTool(self, pose1, pose2)

    def calRelativePoseSubLeftWorld(self, pose1: 'Eigen::VectorXd', pose2: 'Eigen::VectorXd') -> "Eigen::VectorXd":
        return _limb_py.Kinematics_calRelativePoseSubLeftWorld(self, pose1, pose2)

    def calRelativePoseSubRightWorld(self, pose1: 'Eigen::VectorXd', pose2: 'Eigen::VectorXd') -> "Eigen::VectorXd":
        return _limb_py.Kinematics_calRelativePoseSubRightWorld(self, pose1, pose2)

    def calCartesianSpaceOffset(self, pose: 'Eigen::VectorXd', offset: 'Eigen::VectorXd', coordinate_type: 'std::string') -> "Eigen::VectorXd":
        return _limb_py.Kinematics_calCartesianSpaceOffset(self, pose, offset, coordinate_type)

    def calMinCollisionDistance(self, *args) -> "double":
        return _limb_py.Kinematics_calMinCollisionDistance(self, *args)

    def pinv(self, mat_in: 'Eigen::MatrixXd &', mat_out: 'Eigen::MatrixXd &') -> "void":
        return _limb_py.Kinematics_pinv(self, mat_in, mat_out)
Kinematics_swigregister = _limb_py.Kinematics_swigregister
Kinematics_swigregister(Kinematics)

UR3 = _limb_py.UR3
UR5 = _limb_py.UR5
UR10 = _limb_py.UR10
UR16e = _limb_py.UR16e

def forward(q: 'double const *', T: 'double *', ur_type: 'int') -> "void":
    return _limb_py.forward(q, T, ur_type)
forward = _limb_py.forward

def inverse(T: 'double const *', q_sols: 'double *', q6_des: 'double', ur_type: 'int') -> "int":
    return _limb_py.inverse(T, q_sols, q6_des, ur_type)
inverse = _limb_py.inverse
class Dynamics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dynamics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dynamics, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_config"] = _limb_py.Dynamics__config_set
    __swig_getmethods__["_config"] = _limb_py.Dynamics__config_get
    if _newclass:
        _config = _swig_property(_limb_py.Dynamics__config_get, _limb_py.Dynamics__config_set)

    def __init__(self, *args):
        this = _limb_py.new_Dynamics(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def calGravityTorqueKDL(self, *args) -> "Eigen::VectorXd":
        return _limb_py.Dynamics_calGravityTorqueKDL(self, *args)

    def calMassMatrixKDL(self, q: 'Eigen::VectorXd') -> "Eigen::MatrixXd":
        return _limb_py.Dynamics_calMassMatrixKDL(self, q)

    def calInverseDynamics(self, *args) -> "Eigen::VectorXd":
        return _limb_py.Dynamics_calInverseDynamics(self, *args)
    __swig_destroy__ = _limb_py.delete_Dynamics
    __del__ = lambda self: None
Dynamics_swigregister = _limb_py.Dynamics_swigregister
Dynamics_swigregister(Dynamics)

class WaypointPlanning(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WaypointPlanning, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WaypointPlanning, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cubic_spline_interpolation"] = _limb_py.WaypointPlanning_cubic_spline_interpolation_set
    __swig_getmethods__["cubic_spline_interpolation"] = _limb_py.WaypointPlanning_cubic_spline_interpolation_get
    if _newclass:
        cubic_spline_interpolation = _swig_property(_limb_py.WaypointPlanning_cubic_spline_interpolation_get, _limb_py.WaypointPlanning_cubic_spline_interpolation_set)
    __swig_setmethods__["waypoint_list"] = _limb_py.WaypointPlanning_waypoint_list_set
    __swig_getmethods__["waypoint_list"] = _limb_py.WaypointPlanning_waypoint_list_get
    if _newclass:
        waypoint_list = _swig_property(_limb_py.WaypointPlanning_waypoint_list_get, _limb_py.WaypointPlanning_waypoint_list_set)
    __swig_setmethods__["num"] = _limb_py.WaypointPlanning_num_set
    __swig_getmethods__["num"] = _limb_py.WaypointPlanning_num_get
    if _newclass:
        num = _swig_property(_limb_py.WaypointPlanning_num_get, _limb_py.WaypointPlanning_num_set)

    def __init__(self):
        this = _limb_py.new_WaypointPlanning()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_WaypointPlanning
    __del__ = lambda self: None
WaypointPlanning_swigregister = _limb_py.WaypointPlanning_swigregister
WaypointPlanning_swigregister(WaypointPlanning)

class CubicSplineInterpolation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CubicSplineInterpolation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CubicSplineInterpolation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flag"] = _limb_py.CubicSplineInterpolation_flag_set
    __swig_getmethods__["flag"] = _limb_py.CubicSplineInterpolation_flag_get
    if _newclass:
        flag = _swig_property(_limb_py.CubicSplineInterpolation_flag_get, _limb_py.CubicSplineInterpolation_flag_set)
    __swig_setmethods__["point_num"] = _limb_py.CubicSplineInterpolation_point_num_set
    __swig_getmethods__["point_num"] = _limb_py.CubicSplineInterpolation_point_num_get
    if _newclass:
        point_num = _swig_property(_limb_py.CubicSplineInterpolation_point_num_get, _limb_py.CubicSplineInterpolation_point_num_set)
    __swig_setmethods__["duration"] = _limb_py.CubicSplineInterpolation_duration_set
    __swig_getmethods__["duration"] = _limb_py.CubicSplineInterpolation_duration_get
    if _newclass:
        duration = _swig_property(_limb_py.CubicSplineInterpolation_duration_get, _limb_py.CubicSplineInterpolation_duration_set)
    __swig_setmethods__["cqi"] = _limb_py.CubicSplineInterpolation_cqi_set
    __swig_getmethods__["cqi"] = _limb_py.CubicSplineInterpolation_cqi_get
    if _newclass:
        cqi = _swig_property(_limb_py.CubicSplineInterpolation_cqi_get, _limb_py.CubicSplineInterpolation_cqi_set)
    __swig_setmethods__["cti"] = _limb_py.CubicSplineInterpolation_cti_set
    __swig_getmethods__["cti"] = _limb_py.CubicSplineInterpolation_cti_get
    if _newclass:
        cti = _swig_property(_limb_py.CubicSplineInterpolation_cti_get, _limb_py.CubicSplineInterpolation_cti_set)
    __swig_setmethods__["ai"] = _limb_py.CubicSplineInterpolation_ai_set
    __swig_getmethods__["ai"] = _limb_py.CubicSplineInterpolation_ai_get
    if _newclass:
        ai = _swig_property(_limb_py.CubicSplineInterpolation_ai_get, _limb_py.CubicSplineInterpolation_ai_set)
    __swig_setmethods__["bi"] = _limb_py.CubicSplineInterpolation_bi_set
    __swig_getmethods__["bi"] = _limb_py.CubicSplineInterpolation_bi_get
    if _newclass:
        bi = _swig_property(_limb_py.CubicSplineInterpolation_bi_get, _limb_py.CubicSplineInterpolation_bi_set)
    __swig_setmethods__["ci"] = _limb_py.CubicSplineInterpolation_ci_set
    __swig_getmethods__["ci"] = _limb_py.CubicSplineInterpolation_ci_get
    if _newclass:
        ci = _swig_property(_limb_py.CubicSplineInterpolation_ci_get, _limb_py.CubicSplineInterpolation_ci_set)
    __swig_setmethods__["di"] = _limb_py.CubicSplineInterpolation_di_set
    __swig_getmethods__["di"] = _limb_py.CubicSplineInterpolation_di_get
    if _newclass:
        di = _swig_property(_limb_py.CubicSplineInterpolation_di_get, _limb_py.CubicSplineInterpolation_di_set)
    __swig_setmethods__["h"] = _limb_py.CubicSplineInterpolation_h_set
    __swig_getmethods__["h"] = _limb_py.CubicSplineInterpolation_h_get
    if _newclass:
        h = _swig_property(_limb_py.CubicSplineInterpolation_h_get, _limb_py.CubicSplineInterpolation_h_set)
    __swig_setmethods__["A"] = _limb_py.CubicSplineInterpolation_A_set
    __swig_getmethods__["A"] = _limb_py.CubicSplineInterpolation_A_get
    if _newclass:
        A = _swig_property(_limb_py.CubicSplineInterpolation_A_get, _limb_py.CubicSplineInterpolation_A_set)
    __swig_setmethods__["B"] = _limb_py.CubicSplineInterpolation_B_set
    __swig_getmethods__["B"] = _limb_py.CubicSplineInterpolation_B_get
    if _newclass:
        B = _swig_property(_limb_py.CubicSplineInterpolation_B_get, _limb_py.CubicSplineInterpolation_B_set)
    __swig_setmethods__["C"] = _limb_py.CubicSplineInterpolation_C_set
    __swig_getmethods__["C"] = _limb_py.CubicSplineInterpolation_C_get
    if _newclass:
        C = _swig_property(_limb_py.CubicSplineInterpolation_C_get, _limb_py.CubicSplineInterpolation_C_set)
    __swig_setmethods__["D"] = _limb_py.CubicSplineInterpolation_D_set
    __swig_getmethods__["D"] = _limb_py.CubicSplineInterpolation_D_get
    if _newclass:
        D = _swig_property(_limb_py.CubicSplineInterpolation_D_get, _limb_py.CubicSplineInterpolation_D_set)
    __swig_setmethods__["E"] = _limb_py.CubicSplineInterpolation_E_set
    __swig_getmethods__["E"] = _limb_py.CubicSplineInterpolation_E_get
    if _newclass:
        E = _swig_property(_limb_py.CubicSplineInterpolation_E_get, _limb_py.CubicSplineInterpolation_E_set)
    __swig_setmethods__["M"] = _limb_py.CubicSplineInterpolation_M_set
    __swig_getmethods__["M"] = _limb_py.CubicSplineInterpolation_M_get
    if _newclass:
        M = _swig_property(_limb_py.CubicSplineInterpolation_M_get, _limb_py.CubicSplineInterpolation_M_set)

    def __init__(self):
        this = _limb_py.new_CubicSplineInterpolation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_CubicSplineInterpolation
    __del__ = lambda self: None
CubicSplineInterpolation_swigregister = _limb_py.CubicSplineInterpolation_swigregister
CubicSplineInterpolation_swigregister(CubicSplineInterpolation)

class WaypointList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WaypointList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WaypointList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lenth"] = _limb_py.WaypointList_lenth_set
    __swig_getmethods__["lenth"] = _limb_py.WaypointList_lenth_get
    if _newclass:
        lenth = _swig_property(_limb_py.WaypointList_lenth_get, _limb_py.WaypointList_lenth_set)
    __swig_setmethods__["waypoint"] = _limb_py.WaypointList_waypoint_set
    __swig_getmethods__["waypoint"] = _limb_py.WaypointList_waypoint_get
    if _newclass:
        waypoint = _swig_property(_limb_py.WaypointList_waypoint_get, _limb_py.WaypointList_waypoint_set)
    __swig_setmethods__["time_list"] = _limb_py.WaypointList_time_list_set
    __swig_getmethods__["time_list"] = _limb_py.WaypointList_time_list_get
    if _newclass:
        time_list = _swig_property(_limb_py.WaypointList_time_list_get, _limb_py.WaypointList_time_list_set)

    def __init__(self):
        this = _limb_py.new_WaypointList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_WaypointList
    __del__ = lambda self: None
WaypointList_swigregister = _limb_py.WaypointList_swigregister
WaypointList_swigregister(WaypointList)

class Planning(Kinematics):
    __swig_setmethods__ = {}
    for _s in [Kinematics]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Planning, name, value)
    __swig_getmethods__ = {}
    for _s in [Kinematics]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Planning, name)
    __repr__ = _swig_repr
    __swig_setmethods__["online_trajectory_generation"] = _limb_py.Planning_online_trajectory_generation_set
    __swig_getmethods__["online_trajectory_generation"] = _limb_py.Planning_online_trajectory_generation_get
    if _newclass:
        online_trajectory_generation = _swig_property(_limb_py.Planning_online_trajectory_generation_get, _limb_py.Planning_online_trajectory_generation_set)

    def __init__(self, *args):
        this = _limb_py.new_Planning(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_Planning
    __del__ = lambda self: None

    def calCartesianSpacePlanning(self, *args) -> "Eigen::VectorXd":
        return _limb_py.Planning_calCartesianSpacePlanning(self, *args)

    def calInterpolationPose(self, init: 'Eigen::VectorXd', goal: 'Eigen::VectorXd', scale: 'double') -> "Eigen::VectorXd":
        return _limb_py.Planning_calInterpolationPose(self, init, goal, scale)

    def cubicPolynomialPlanning(self, *args) -> "Eigen::VectorXd":
        return _limb_py.Planning_cubicPolynomialPlanning(self, *args)

    def jointSpacePlanning(self, *args) -> "Eigen::VectorXd":
        return _limb_py.Planning_jointSpacePlanning(self, *args)

    def calDuration(self, init: 'Eigen::VectorXd', goal: 'Eigen::VectorXd') -> "double":
        return _limb_py.Planning_calDuration(self, init, goal)

    def cartesianSpacePlanning(self, *args) -> "Eigen::VectorXd":
        return _limb_py.Planning_cartesianSpacePlanning(self, *args)

    def sphericalLinearInterpolation(self, starting: 'Eigen::VectorXd', ending: 'Eigen::VectorXd', t: 'double') -> "Eigen::VectorXd":
        return _limb_py.Planning_sphericalLinearInterpolation(self, starting, ending, t)

    def calCubicSplineInterpolationInitList(self, *args) -> "void":
        return _limb_py.Planning_calCubicSplineInterpolationInitList(self, *args)

    def calCubicSplineInterpolationInitEigenList(self, waypoint_planning: 'WaypointPlanning', waypoint_array: 'vector_vector_double', time_list: 'DoubleVector', slice: 'double'=-1) -> "void":
        return _limb_py.Planning_calCubicSplineInterpolationInitEigenList(self, waypoint_planning, waypoint_array, time_list, slice)

    def calLinearPositionList(self, waypoint_planning: 'WaypointPlanning', t: 'double') -> "std::vector< double,std::allocator< double > >":
        return _limb_py.Planning_calLinearPositionList(self, waypoint_planning, t)

    def calCosinePositionList(self, waypoint_planning: 'WaypointPlanning', t: 'double') -> "std::vector< double,std::allocator< double > >":
        return _limb_py.Planning_calCosinePositionList(self, waypoint_planning, t)

    def calCubicPositionList(self, waypoint_planning: 'WaypointPlanning', t: 'double') -> "std::vector< double,std::allocator< double > >":
        return _limb_py.Planning_calCubicPositionList(self, waypoint_planning, t)

    def calCatmullRomPositionList(self, waypoint_planning: 'WaypointPlanning', t: 'double') -> "std::vector< double,std::allocator< double > >":
        return _limb_py.Planning_calCatmullRomPositionList(self, waypoint_planning, t)

    def calHermitePositionList(self, waypoint_planning: 'WaypointPlanning', t: 'double', tension: 'double', bias: 'double') -> "std::vector< double,std::allocator< double > >":
        return _limb_py.Planning_calHermitePositionList(self, waypoint_planning, t, tension, bias)

    def calCubicSplineInterpolationPositionList(self, waypoint_planning: 'WaypointPlanning', t: 'double') -> "std::vector< double,std::allocator< double > >":
        return _limb_py.Planning_calCubicSplineInterpolationPositionList(self, waypoint_planning, t)

    def calCubicSplineInterpolationSpeedList(self, waypoint_planning: 'WaypointPlanning', t: 'double') -> "std::vector< double,std::allocator< double > >":
        return _limb_py.Planning_calCubicSplineInterpolationSpeedList(self, waypoint_planning, t)

    def calCubicSplineInterpolationAccelerationList(self, waypoint_planning: 'WaypointPlanning', t: 'double') -> "std::vector< double,std::allocator< double > >":
        return _limb_py.Planning_calCubicSplineInterpolationAccelerationList(self, waypoint_planning, t)

    def cubicSplineInterpolationInit(self, num: 'int', waypoint_list: 'WaypointList', csi: 'CubicSplineInterpolation') -> "void":
        return _limb_py.Planning_cubicSplineInterpolationInit(self, num, waypoint_list, csi)

    def getWaypointTimeStep(self, t: 'double', waypoint_list: 'WaypointList') -> "int":
        return _limb_py.Planning_getWaypointTimeStep(self, t, waypoint_list)

    def calLinearPosition(self, t: 'double', waypoint_list: 'WaypointList') -> "double":
        return _limb_py.Planning_calLinearPosition(self, t, waypoint_list)

    def calCosinePosition(self, t: 'double', waypoint_list: 'WaypointList') -> "double":
        return _limb_py.Planning_calCosinePosition(self, t, waypoint_list)

    def calCubicPosition(self, t: 'double', waypoint_list: 'WaypointList') -> "double":
        return _limb_py.Planning_calCubicPosition(self, t, waypoint_list)

    def calCatmullRomPosition(self, t: 'double', waypoint_list: 'WaypointList') -> "double":
        return _limb_py.Planning_calCatmullRomPosition(self, t, waypoint_list)

    def calHermitePosition(self, t: 'double', waypoint_list: 'WaypointList', tension: 'double', bias: 'double') -> "double":
        return _limb_py.Planning_calHermitePosition(self, t, waypoint_list, tension, bias)

    def sinAccPosition(self, start: 'double', end: 'double', duration: 'int', t: 'int') -> "double":
        return _limb_py.Planning_sinAccPosition(self, start, end, duration, t)

    def sinAccSpeed(self, start: 'double', end: 'double', duration: 'int', t: 'int') -> "double":
        return _limb_py.Planning_sinAccSpeed(self, start, end, duration, t)

    def cubicPolynomial(self, start_pos: 'double', end_pos: 'double', start_vel: 'double', end_vel: 'double', duration: 'double', t: 'double') -> "double":
        return _limb_py.Planning_cubicPolynomial(self, start_pos, end_pos, start_vel, end_vel, duration, t)

    def calLinear(self, scale: 'double', y1: 'double', y2: 'double') -> "double":
        return _limb_py.Planning_calLinear(self, scale, y1, y2)

    def calCosine(self, scale: 'double', y1: 'double', y2: 'double') -> "double":
        return _limb_py.Planning_calCosine(self, scale, y1, y2)

    def calCubic(self, scale: 'double', y0: 'double', y1: 'double', y2: 'double', y3: 'double') -> "double":
        return _limb_py.Planning_calCubic(self, scale, y0, y1, y2, y3)

    def calCatmullRom(self, scale: 'double', y0: 'double', y1: 'double', y2: 'double', y3: 'double') -> "double":
        return _limb_py.Planning_calCatmullRom(self, scale, y0, y1, y2, y3)

    def calHermite(self, scale: 'double', y0: 'double', y1: 'double', y2: 'double', y3: 'double', tension: 'double', bias: 'double') -> "double":
        return _limb_py.Planning_calHermite(self, scale, y0, y1, y2, y3, tension, bias)

    def calCubicSplineInterpolationPosition(self, t: 'double', csi: 'CubicSplineInterpolation') -> "double":
        return _limb_py.Planning_calCubicSplineInterpolationPosition(self, t, csi)

    def calCubicSplineInterpolationSpeed(self, t: 'double', csi: 'CubicSplineInterpolation') -> "double":
        return _limb_py.Planning_calCubicSplineInterpolationSpeed(self, t, csi)

    def calCubicSplineInterpolationAcceleration(self, t: 'double', csi: 'CubicSplineInterpolation') -> "double":
        return _limb_py.Planning_calCubicSplineInterpolationAcceleration(self, t, csi)

    def CubicSplineInterpolationSetup(self, start_speed: 'double', waypoint_list: 'WaypointList', csi: 'CubicSplineInterpolation') -> "void":
        return _limb_py.Planning_CubicSplineInterpolationSetup(self, start_speed, waypoint_list, csi)

    def TDMA(self, X: 'double *', n: 'int const', A: 'double *', B: 'double *', C: 'double *', D: 'double *') -> "void":
        return _limb_py.Planning_TDMA(self, X, n, A, B, C, D)

    def OTGControllersInit(self, *args) -> "void":
        return _limb_py.Planning_OTGControllersInit(self, *args)

    def OTGControllersUpdate(self, *args) -> "void":
        return _limb_py.Planning_OTGControllersUpdate(self, *args)

    def OTGControllersOutput(self, *args) -> "Eigen::VectorXd":
        return _limb_py.Planning_OTGControllersOutput(self, *args)

    def OTGControllersQuit(self, *args) -> "void":
        return _limb_py.Planning_OTGControllersQuit(self, *args)

    def calP4PathPlannerInitEigenList(self, *args) -> "p4::PolynomialSolver::Solution":
        return _limb_py.Planning_calP4PathPlannerInitEigenList(self, *args)

    def calP4PathPlanner(self, _now_time: 'double', time_array: 'DoubleVector', solution: 'p4::PolynomialSolver::Solution const') -> "Eigen::VectorXd":
        return _limb_py.Planning_calP4PathPlanner(self, _now_time, time_array, solution)

    def jointPlanning(self, *args) -> "void":
        return _limb_py.Planning_jointPlanning(self, *args)

    def jointPlanningOTG(self, interface: 'std::shared_ptr< Interface >', pos_des: 'Eigen::VectorXd', scale: 'double') -> "void":
        return _limb_py.Planning_jointPlanningOTG(self, interface, pos_des, scale)

    def endpointPlanning(self, *args) -> "bool":
        return _limb_py.Planning_endpointPlanning(self, *args)
Planning_swigregister = _limb_py.Planning_swigregister
Planning_swigregister(Planning)

class Control(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Control, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Control, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _limb_py.new_Control()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_Control
    __del__ = lambda self: None
Control_swigregister = _limb_py.Control_swigregister
Control_swigregister(Control)

class Force(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Force, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Force, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _limb_py.new_Force()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_Force
    __del__ = lambda self: None
Force_swigregister = _limb_py.Force_swigregister
Force_swigregister(Force)

class Calibration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Calibration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Calibration, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _limb_py.new_Calibration()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_Calibration
    __del__ = lambda self: None
Calibration_swigregister = _limb_py.Calibration_swigregister
Calibration_swigregister(Calibration)

NULLINTERFACE = _limb_py.NULLINTERFACE
INTERFACEREAL = _limb_py.INTERFACEREAL
INTERFACESIM = _limb_py.INTERFACESIM
class Interface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Interface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Interface, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_interfaceBase"] = _limb_py.Interface__interfaceBase_set
    __swig_getmethods__["_interfaceBase"] = _limb_py.Interface__interfaceBase_get
    if _newclass:
        _interfaceBase = _swig_property(_limb_py.Interface__interfaceBase_get, _limb_py.Interface__interfaceBase_set)
    __swig_setmethods__["_config"] = _limb_py.Interface__config_set
    __swig_getmethods__["_config"] = _limb_py.Interface__config_get
    if _newclass:
        _config = _swig_property(_limb_py.Interface__config_get, _limb_py.Interface__config_set)
    __swig_setmethods__["n"] = _limb_py.Interface_n_set
    __swig_getmethods__["n"] = _limb_py.Interface_n_get
    if _newclass:
        n = _swig_property(_limb_py.Interface_n_get, _limb_py.Interface_n_set)
    __swig_setmethods__["_controlMode"] = _limb_py.Interface__controlMode_set
    __swig_getmethods__["_controlMode"] = _limb_py.Interface__controlMode_get
    if _newclass:
        _controlMode = _swig_property(_limb_py.Interface__controlMode_get, _limb_py.Interface__controlMode_set)

    def __init__(self, node: 'std::shared_ptr< ros::NodeHandle >', cfg: 'std::shared_ptr< Config >'):
        this = _limb_py.new_Interface(node, cfg)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def createInterface(self, type: 'enum InterfaceType') -> "std::shared_ptr< InterfaceBase >":
        return _limb_py.Interface_createInterface(self, type)
    __swig_destroy__ = _limb_py.delete_Interface
    __del__ = lambda self: None

    def updateJointState(self) -> "void":
        return _limb_py.Interface_updateJointState(self)

    def setControlMode(self, mode: 'enum ControlMode') -> "void":
        return _limb_py.Interface_setControlMode(self, mode)

    def getControlMode(self) -> "enum ControlMode":
        return _limb_py.Interface_getControlMode(self)

    def setJointPosition(self, pos: 'Eigen::VectorXd') -> "Eigen::VectorXd":
        return _limb_py.Interface_setJointPosition(self, pos)

    def setJointVelocity(self, vel: 'Eigen::VectorXd') -> "Eigen::VectorXd":
        return _limb_py.Interface_setJointVelocity(self, vel)

    def setJointTorque(self, tor: 'Eigen::VectorXd') -> "Eigen::VectorXd":
        return _limb_py.Interface_setJointTorque(self, tor)

    def setJointCurrentTorque(self, tor: 'Eigen::VectorXd') -> "Eigen::VectorXd":
        return _limb_py.Interface_setJointCurrentTorque(self, tor)

    def setEffectorJointPosition(self, pos: 'Eigen::VectorXd') -> "void":
        return _limb_py.Interface_setEffectorJointPosition(self, pos)

    def setEffectorPosition(self, scale: 'double') -> "void":
        return _limb_py.Interface_setEffectorPosition(self, scale)

    def setEffectorVelocity(self, scale: 'double') -> "void":
        return _limb_py.Interface_setEffectorVelocity(self, scale)

    def setEffectorTorque(self, scale: 'double') -> "void":
        return _limb_py.Interface_setEffectorTorque(self, scale)

    def setEffectorLimitPosition(self, scale: 'double') -> "void":
        return _limb_py.Interface_setEffectorLimitPosition(self, scale)

    def setEffectorLimitVelocity(self, scale: 'double') -> "void":
        return _limb_py.Interface_setEffectorLimitVelocity(self, scale)

    def setEffectorLimitForce(self, scale: 'double') -> "void":
        return _limb_py.Interface_setEffectorLimitForce(self, scale)

    def setEffectorResetMode(self) -> "void":
        return _limb_py.Interface_setEffectorResetMode(self)

    def setEffectorBasicMode(self) -> "void":
        return _limb_py.Interface_setEffectorBasicMode(self)

    def setEffectorPinchMode(self) -> "void":
        return _limb_py.Interface_setEffectorPinchMode(self)

    def setEffectorWideMode(self) -> "void":
        return _limb_py.Interface_setEffectorWideMode(self)

    def setEffectorScissorMode(self) -> "void":
        return _limb_py.Interface_setEffectorScissorMode(self)

    def setEffectorOpenMode(self) -> "void":
        return _limb_py.Interface_setEffectorOpenMode(self)

    def setEffectorCloseMode(self) -> "void":
        return _limb_py.Interface_setEffectorCloseMode(self)

    def setEffectorMode(self, mode: 'std::string', value: 'double'=0) -> "void":
        return _limb_py.Interface_setEffectorMode(self, mode, value)

    def getEffectorState(self) -> "std::string":
        return _limb_py.Interface_getEffectorState(self)

    def getEffectorMode(self) -> "std::string":
        return _limb_py.Interface_getEffectorMode(self)
Interface_swigregister = _limb_py.Interface_swigregister
Interface_swigregister(Interface)

POSITION = _limb_py.POSITION
VELOCITY = _limb_py.VELOCITY
TORQUE = _limb_py.TORQUE
CURRENTTORQUE = _limb_py.CURRENTTORQUE
TRAJECTORY = _limb_py.TRAJECTORY
LIMIT_SET_POSITION_MODE = _limb_py.LIMIT_SET_POSITION_MODE
LIMIT_SET_VELOCITY_MODE = _limb_py.LIMIT_SET_VELOCITY_MODE
LIMIT_SET_FORCE_MODE = _limb_py.LIMIT_SET_FORCE_MODE
RESET_MODE = _limb_py.RESET_MODE
BASIC_MODE = _limb_py.BASIC_MODE
PINCH_MODE = _limb_py.PINCH_MODE
WIDE_MODE = _limb_py.WIDE_MODE
SCISSOR_MODE = _limb_py.SCISSOR_MODE
OPEN_MODE = _limb_py.OPEN_MODE
CLOSE_MODE = _limb_py.CLOSE_MODE
class InterfaceBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterfaceBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterfaceBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["controlState"] = _limb_py.InterfaceBase_controlState_set
    __swig_getmethods__["controlState"] = _limb_py.InterfaceBase_controlState_get
    if _newclass:
        controlState = _swig_property(_limb_py.InterfaceBase_controlState_get, _limb_py.InterfaceBase_controlState_set)

    def interfaceController(self, *args) -> "void":
        return _limb_py.InterfaceBase_interfaceController(self, *args)

    def interfaceEffectorController(self, mode: 'std::string') -> "void":
        return _limb_py.InterfaceBase_interfaceEffectorController(self, mode)

    def getJointPosition(self) -> "Eigen::VectorXd":
        return _limb_py.InterfaceBase_getJointPosition(self)

    def getJointVelocity(self) -> "Eigen::VectorXd":
        return _limb_py.InterfaceBase_getJointVelocity(self)

    def getJointTorque(self) -> "Eigen::VectorXd":
        return _limb_py.InterfaceBase_getJointTorque(self)

    def getJointCurrentTorque(self) -> "Eigen::VectorXd":
        return _limb_py.InterfaceBase_getJointCurrentTorque(self)

    def setJointPosition(self, pos: 'Eigen::VectorXd') -> "void":
        return _limb_py.InterfaceBase_setJointPosition(self, pos)

    def setJointVelocity(self, vel: 'Eigen::VectorXd') -> "void":
        return _limb_py.InterfaceBase_setJointVelocity(self, vel)

    def setJointTorque(self, tor: 'Eigen::VectorXd') -> "void":
        return _limb_py.InterfaceBase_setJointTorque(self, tor)

    def setJointCurrentTorque(self, tor: 'Eigen::VectorXd') -> "void":
        return _limb_py.InterfaceBase_setJointCurrentTorque(self, tor)
    __swig_destroy__ = _limb_py.delete_InterfaceBase
    __del__ = lambda self: None
InterfaceBase_swigregister = _limb_py.InterfaceBase_swigregister
InterfaceBase_swigregister(InterfaceBase)

class LimbObjectDescriptor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LimbObjectDescriptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LimbObjectDescriptor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _limb_py.LimbObjectDescriptor_name_set
    __swig_getmethods__["name"] = _limb_py.LimbObjectDescriptor_name_get
    if _newclass:
        name = _swig_property(_limb_py.LimbObjectDescriptor_name_get, _limb_py.LimbObjectDescriptor_name_set)
    __swig_setmethods__["config_path"] = _limb_py.LimbObjectDescriptor_config_path_set
    __swig_getmethods__["config_path"] = _limb_py.LimbObjectDescriptor_config_path_get
    if _newclass:
        config_path = _swig_property(_limb_py.LimbObjectDescriptor_config_path_get, _limb_py.LimbObjectDescriptor_config_path_set)

    def __init__(self):
        this = _limb_py.new_LimbObjectDescriptor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_LimbObjectDescriptor
    __del__ = lambda self: None
LimbObjectDescriptor_swigregister = _limb_py.LimbObjectDescriptor_swigregister
LimbObjectDescriptor_swigregister(LimbObjectDescriptor)

class Limb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Limb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Limb, name)
    __repr__ = _swig_repr
    if _newclass:
        CreateLimbList = staticmethod(_limb_py.Limb_CreateLimbList)
    else:
        CreateLimbList = _limb_py.Limb_CreateLimbList
    __swig_setmethods__["_config"] = _limb_py.Limb__config_set
    __swig_getmethods__["_config"] = _limb_py.Limb__config_get
    if _newclass:
        _config = _swig_property(_limb_py.Limb__config_get, _limb_py.Limb__config_set)
    __swig_setmethods__["_interface"] = _limb_py.Limb__interface_set
    __swig_getmethods__["_interface"] = _limb_py.Limb__interface_get
    if _newclass:
        _interface = _swig_property(_limb_py.Limb__interface_get, _limb_py.Limb__interface_set)
    __swig_setmethods__["_interfaceBase"] = _limb_py.Limb__interfaceBase_set
    __swig_getmethods__["_interfaceBase"] = _limb_py.Limb__interfaceBase_get
    if _newclass:
        _interfaceBase = _swig_property(_limb_py.Limb__interfaceBase_get, _limb_py.Limb__interfaceBase_set)
    __swig_setmethods__["_transformer"] = _limb_py.Limb__transformer_set
    __swig_getmethods__["_transformer"] = _limb_py.Limb__transformer_get
    if _newclass:
        _transformer = _swig_property(_limb_py.Limb__transformer_get, _limb_py.Limb__transformer_set)
    __swig_setmethods__["_kinematics"] = _limb_py.Limb__kinematics_set
    __swig_getmethods__["_kinematics"] = _limb_py.Limb__kinematics_get
    if _newclass:
        _kinematics = _swig_property(_limb_py.Limb__kinematics_get, _limb_py.Limb__kinematics_set)
    __swig_setmethods__["_dynamics"] = _limb_py.Limb__dynamics_set
    __swig_getmethods__["_dynamics"] = _limb_py.Limb__dynamics_get
    if _newclass:
        _dynamics = _swig_property(_limb_py.Limb__dynamics_get, _limb_py.Limb__dynamics_set)
    __swig_setmethods__["_planning"] = _limb_py.Limb__planning_set
    __swig_getmethods__["_planning"] = _limb_py.Limb__planning_get
    if _newclass:
        _planning = _swig_property(_limb_py.Limb__planning_get, _limb_py.Limb__planning_set)
    __swig_setmethods__["_control"] = _limb_py.Limb__control_set
    __swig_getmethods__["_control"] = _limb_py.Limb__control_get
    if _newclass:
        _control = _swig_property(_limb_py.Limb__control_get, _limb_py.Limb__control_set)
    __swig_setmethods__["_force"] = _limb_py.Limb__force_set
    __swig_getmethods__["_force"] = _limb_py.Limb__force_get
    if _newclass:
        _force = _swig_property(_limb_py.Limb__force_get, _limb_py.Limb__force_set)
    __swig_setmethods__["_calibration"] = _limb_py.Limb__calibration_set
    __swig_getmethods__["_calibration"] = _limb_py.Limb__calibration_get
    if _newclass:
        _calibration = _swig_property(_limb_py.Limb__calibration_get, _limb_py.Limb__calibration_set)
    __swig_setmethods__["n"] = _limb_py.Limb_n_set
    __swig_getmethods__["n"] = _limb_py.Limb_n_get
    if _newclass:
        n = _swig_property(_limb_py.Limb_n_get, _limb_py.Limb_n_set)

    def __init__(self, *args):
        this = _limb_py.new_Limb(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def limbInit(self) -> "void":
        return _limb_py.Limb_limbInit(self)
    __swig_destroy__ = _limb_py.delete_Limb
    __del__ = lambda self: None

    def updateThread(self) -> "void":
        return _limb_py.Limb_updateThread(self)

    def update(self) -> "void":
        return _limb_py.Limb_update(self)

    def updateJointState(self) -> "void":
        return _limb_py.Limb_updateJointState(self)

    def updateEndpointState(self) -> "void":
        return _limb_py.Limb_updateEndpointState(self)

    def Stop(self) -> "void":
        return _limb_py.Limb_Stop(self)
Limb_swigregister = _limb_py.Limb_swigregister
Limb_swigregister(Limb)

def Limb_CreateLimbList(limb_object_descriptors: 'std::vector< LimbObjectDescriptor,std::allocator< LimbObjectDescriptor > > const &') -> "std::shared_ptr< std::map< std::string,std::shared_ptr< Limb >,std::less< std::string >,std::allocator< std::pair< std::string const,std::shared_ptr< Limb > > > > >":
    return _limb_py.Limb_CreateLimbList(limb_object_descriptors)
Limb_CreateLimbList = _limb_py.Limb_CreateLimbList

class YamlNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, YamlNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, YamlNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["yaml"] = _limb_py.YamlNode_yaml_set
    __swig_getmethods__["yaml"] = _limb_py.YamlNode_yaml_get
    if _newclass:
        yaml = _swig_property(_limb_py.YamlNode_yaml_get, _limb_py.YamlNode_yaml_set)

    def load(self, data: 'std::string const &') -> "YAML::Node":
        return _limb_py.YamlNode_load(self, data)

    def __init__(self):
        this = _limb_py.new_YamlNode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_YamlNode
    __del__ = lambda self: None
YamlNode_swigregister = _limb_py.YamlNode_swigregister
YamlNode_swigregister(YamlNode)

class MetaBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetaBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MetaBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["_input"] = _limb_py.MetaBase__input_set
    __swig_getmethods__["_input"] = _limb_py.MetaBase__input_get
    if _newclass:
        _input = _swig_property(_limb_py.MetaBase__input_get, _limb_py.MetaBase__input_set)
    __swig_setmethods__["_limb_list"] = _limb_py.MetaBase__limb_list_set
    __swig_getmethods__["_limb_list"] = _limb_py.MetaBase__limb_list_get
    if _newclass:
        _limb_list = _swig_property(_limb_py.MetaBase__limb_list_get, _limb_py.MetaBase__limb_list_set)
    __swig_setmethods__["_limb_name"] = _limb_py.MetaBase__limb_name_set
    __swig_getmethods__["_limb_name"] = _limb_py.MetaBase__limb_name_get
    if _newclass:
        _limb_name = _swig_property(_limb_py.MetaBase__limb_name_get, _limb_py.MetaBase__limb_name_set)

    def initialize(self, *args) -> "void":
        return _limb_py.MetaBase_initialize(self, *args)

    def execute(self, loop: 'bool') -> "std::string":
        return _limb_py.MetaBase_execute(self, loop)
    __swig_destroy__ = _limb_py.delete_MetaBase
    __del__ = lambda self: None
MetaBase_swigregister = _limb_py.MetaBase_swigregister
MetaBase_swigregister(MetaBase)

class ObjectTraj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectTraj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectTraj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _limb_py.ObjectTraj_len_set
    __swig_getmethods__["len"] = _limb_py.ObjectTraj_len_get
    if _newclass:
        len = _swig_property(_limb_py.ObjectTraj_len_get, _limb_py.ObjectTraj_len_set)
    __swig_setmethods__["t"] = _limb_py.ObjectTraj_t_set
    __swig_getmethods__["t"] = _limb_py.ObjectTraj_t_get
    if _newclass:
        t = _swig_property(_limb_py.ObjectTraj_t_get, _limb_py.ObjectTraj_t_set)
    __swig_setmethods__["pose"] = _limb_py.ObjectTraj_pose_set
    __swig_getmethods__["pose"] = _limb_py.ObjectTraj_pose_get
    if _newclass:
        pose = _swig_property(_limb_py.ObjectTraj_pose_get, _limb_py.ObjectTraj_pose_set)

    def __init__(self):
        this = _limb_py.new_ObjectTraj()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_ObjectTraj
    __del__ = lambda self: None
ObjectTraj_swigregister = _limb_py.ObjectTraj_swigregister
ObjectTraj_swigregister(ObjectTraj)

class ObjectTrajPredict(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectTrajPredict, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectTrajPredict, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _limb_py.ObjectTrajPredict_len_set
    __swig_getmethods__["len"] = _limb_py.ObjectTrajPredict_len_get
    if _newclass:
        len = _swig_property(_limb_py.ObjectTrajPredict_len_get, _limb_py.ObjectTrajPredict_len_set)
    __swig_setmethods__["t"] = _limb_py.ObjectTrajPredict_t_set
    __swig_getmethods__["t"] = _limb_py.ObjectTrajPredict_t_get
    if _newclass:
        t = _swig_property(_limb_py.ObjectTrajPredict_t_get, _limb_py.ObjectTrajPredict_t_set)
    __swig_setmethods__["pose"] = _limb_py.ObjectTrajPredict_pose_set
    __swig_getmethods__["pose"] = _limb_py.ObjectTrajPredict_pose_get
    if _newclass:
        pose = _swig_property(_limb_py.ObjectTrajPredict_pose_get, _limb_py.ObjectTrajPredict_pose_set)

    def __init__(self):
        this = _limb_py.new_ObjectTrajPredict()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _limb_py.delete_ObjectTrajPredict
    __del__ = lambda self: None
ObjectTrajPredict_swigregister = _limb_py.ObjectTrajPredict_swigregister
ObjectTrajPredict_swigregister(ObjectTrajPredict)

# This file is compatible with both classic and new-style classes.


